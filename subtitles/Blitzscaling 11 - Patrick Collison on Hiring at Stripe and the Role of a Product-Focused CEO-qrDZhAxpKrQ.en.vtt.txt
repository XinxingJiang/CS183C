WEBVTT
Kind: captions
Language: en
- Okay so this is class number 11.
I think this is the
midpoint, very exciting.
So we're talking about scaling from
scaling to village.
And we're very lucky to
have Patrick Collison,
who I think you'll all
find super interesting
and super thoughtful, so
just let's welcome Patrick.
(applause)
- Thank you.
- So thanks for coming.
- Thanks for having me.
- He walked in with a book made of paper,
which is always very exciting.
(Patrick laughs)
So can you just tell the story
about starting Stripe,
tell the founding story?
- Yeah, sure.
So, and by the way,
apologies if, you know,
suggesting this be off the record,
suggest that there'll be all these
sort of salacious details or something.
- Not a problem.
- But mostly just I think it's much better
in these to be able to just sort of
directly sort of share everything
and not have this sort of process
where in the back of your mind
trying to run the filter
on what makes sense
for public consumption.
Because a lot of this stuff is sort of,
this is not like a company
that started ten years ago,
this is kind of happening
kind of week-to-week
and month-to-month.
But the general story of Stripe
is, well, I'm always a
bit sort of skeptical
of kind of founding mythology
sort of around companies
in that I'm pretty sure they
get sort of heavily edited
kind of post-facto.
For Stripe at least, it's
really not that dramatic
in the sense that John, my
co-founder and brother and I
were in school together.
We were both on the East Coast,
and we'd started building
these iPhone apps together,
and we were basically sort of
paying our college tuition out of
sort of the revenue coming
from these iPhone apps,
and so we'd kind of gotten into the habit
of just working on various side projects,
and we kind of had realized that sort of
it was surprisingly easy to make money
out of iPhone apps, right?
(Professor laughs)
And part of the reason it was so easy
was because it was so
easy to charge for things.
And then we were kind of wondering,
"Hmm, you know, despite building sort of
"all these things for
the past couple years,
"why do we never charge
for anything online?"
And we realized, well,
it's such a pain in the ass
to sort of accept
payments on the Internet.
You have to sort of hop
through all these hoops
and basically get a mortgage.
- Right.
- Or so it felt kind
of, in order to sort of
literally receive dollars
from users of your software.
And so I remember using, I'm
not sure if anyone else here
has used this, but there's
a thing called Slicehost,
which was kind of the
first really good sort of
virtualized hosting provider.
I mean EC2 was maybe around the same time,
but EC2 required all this like crazy
Java online hackery.
It wasn't as easy to use as it is now.
Slicehost was really straightforward.
You could click like create server,
you know, select here the next distro,
and sort of 30 seconds later,
there's a root password emailed to you.
And it was sort of really transformative,
because now getting just your own server
was just super straightforward,
and it meant that I kind of really lowered
the activation energy and a better entry
for sort of going and building something.
And we wondered basically why there wasn't
Slicehost for payments.
And so I actually remember
it was in October 2009,
John and I were walking
back from dinner together,
and we'd been sort of
battering around this idea
for a while, Slicehost for payments.
And I remember him commenting to me
that, "Eh, you know, we
should just build a prototype,
(Professor laughs)
"it probably won't be that hard." (laughs)
- [Professor] That's a simple question
leading to 20 years' work.
- Right, well so I was gonna,
so Avi Bryant who works at Stripe
calls Stripe the world's
biggest ever yak shave.
(Professor laughs)
And so maybe in another five years
we'll get back to building side projects.
- Do you guys know what that?
Can you explain what yak shaving is?
- Oh, wait, god, kids these days.
(Professor laughs)
So, you know, yak shave is sort of
when you're sort of building something
or working on some problem,
and you realize that kind of some other
obstruction is going to be inelegant
or you should have some other thing,
and so you start going, fixing that,
and you realize, well,
really in order to fix that,
this thing has to be this
other way and whatever,
and so you kind of get seven layers down,
you kind of forget where you even started,
because the stack has gotten so deep.
There's actually a great
XKCD comic about yak shaves.
I think he's like surrounded
by sharks or something,
he started to try to fix his tv.
I don't know, anyway.
If you search XKCD yak
shave, it illustrates
the concept effectively.
- It's a bike shedding,
but it's a different, slightly different.
- Right.
Right, right.
And I think there's an original parable
about sort of shaving the yak,
and you have to buy
scissors and whatever else.
But anyway, so we just had
to build the prototype,
and we launched kind of
the first version of this
in January of 2010 to just
like a couple of friends.
It was kind of built with
sort of duct tape and wire,
sort of really the sort
of foundations upon which
it was built were sort of fairly flimsy,
but it was enough to
kind of just get a sense
for the basic product experience,
sort of what it would be like.
You kind of instantly
start charging credit cards
just with a kind of a crawl command.
Stripe wasn't called Stripe back then.
It was called /dev/payments
because we, you can tell we were
great binding experts.
But we sort of wondered
what it would be like
to have sort of payments API.
It was kind of straightforward
as just the interface to a node
and sort of the device file system,
you know, you devmouse
or devaudio or whatever.
And we launched that
prototype in January 2010,
and it just sort of took
off by word of mouth.
It wasn't even launched publicly,
but we kind of had this
ever-accumulating wait list
through kind of people
telling their friends
about it or whatever.
And like this was kind of
really surprising to us,
because I mean again, it's like an API
for charging credit cards.
Like it's not a social network,
and so the fact that people
were talking about it
and telling others about it
was kind of quite surprising to us.
And so then that summer we decided to go
and work on it for the summer
as a sort of bootstrap internship.
And we basically been on leave since then.
- (laughs)
I'm sure you'll go back soon.
- That's what my mom
often tries to ensure.
- (laughs)
Yeah, so you'd gone through
starting a company before.
you and your brother.
- Right.
- Shoppa. Shuppa? Shoopa?
- (laughs) Right.
So Shuppa's the actual.
- Another excellent branding.
- Yeah. Right. (laughs)
So we'll actually get this
how we found the name Stripe.
It was actually literally randomly chosen.
But anyway, so we previously started
this other kind of company together which,
it was basically predicated on the notion
that sort there was surprising liquidity
in sort of used items
that sort of part of what,
when you buy something new,
kind of part of the service
that a store provides
is kind of to solve
the information problem
of like where can I get a thing, right?
And so you can kind of
think of the Internet
as a coordinating force in some way
and sort of how can you
expose all this sort of
latent presence of all this stuff
in a more effective way.
And it didn't really work as we thought.
So we went back to school.
(laughs)
- Well but you kind of teamed up with,
that's when you got involved
in YC the first time,
is that right?
- Yeah, it's a kind of complicated story
and sort of involved merging
with another company,
and then that company got acquired,
and so it was actually like a really good
learning experience.
It was kind of when we
raised our first investment
and hired our first people,
and sort of just got a sense for
kind of how a startup worked.
- I guess I was taking
the long way around,
I should've asked directly, which is
you said you created this payments API
and then people just
started talking about it.
I guess my question was
going to be what people,
and how did they find out?
So I guess what I was implying
that you built on top of a community
- I see, I see.
- was in some part connected to YC.
- So that's very true.
So I'd been involved in
sort of Lisp programming
for a real long time,
and I presume folks here know about Lisp,
and its state of morbidity,
so it's a pretty small community.
And through that I got to know Paul Graham
who of course was working on YC
and kind of this other
company we'd started
had gone through YC, and so yeah,
as a result, when we went and
we built this payments API
for developers, incredibly
straightforward to get started,
we actually, a lot of
our friends were thinking
about starting companies
or had started companies
or things like that,
sort of we had some sense
for that community in general,
and that was actually quite powerful,
because exactly to your point,
there were sort of people
you just go and show it to
and get some feedback
from, and you kind of knew
who was on the cusp of
need to start charging
for their software, who
was running out of money,
they might need some revenue
or whatever the case might be.
And so I think that for the
first maybe 20 or 30 users
or thereabouts, they were
almost all YC companies
or friends of people who
we knew had gone through YC
and things like that.
- Yep, so that's one of my rules of thumb
is try to put yourself around people
who are doing interesting things.
And then when you find interesting things,
they start talking about them,
that's a pretty good signal.
- I think that's very true, yeah.
- And so I remember, it
must have been summer
of 2010 or 2011 when
people would start talking
about you guys, about
/dev/payments around here,
and I guess you had come
and done the YC class
in 2010 here?
Is that what you did?
- Yeah, Stripe never actually
formally went through YC.
YC invested.
- Is that true?
I didn't know that.
- But it kind of never went
through the program itself.
- Huh, that's interesting.
That's news to me.
So okay, so we're gonna go
into Stripe in a second.
Can you tell us what it's
like to start a company
with your brother?
- Yeah.
- I guess you don't know anything else.
- I was gonna say, right.
So the kind of trite answer I often give
is that it's kind of good
because we have a chance
to really get good at
resolving our differences
from a pretty early stage.
We've sort of 20 years of kind of fighting
in various ways behind us.
And even though that's kind
of facetious in some way,
I do think that's the common
case for like the really
highbrow startup is for
the co-founder kind of set
to break apart, like it
generally doesn't persist.
And so you look at most companies, right?
And sort of there's some
schism or disagreement
or whatever that kind of
proves insurmountable.
And I think that sort of
having a really strong
kind of foundational relationship there,
you know, a philial
relationship is I guess
one version of that, but even if not that,
I think the case is for
sort of you know the person
for upwards of a decade,
that those in general
seem to fare much better.
And so in that sense, I
think it's been basically
really helpful where we
kind of have the kind
of relationship where there's kind of no
difficulty in telling the other person
that you're really
screwing this up, right?
or this is like completely broken
or whatever the case might be,
because it's a given that
those sort of situations
are going to arise.
The question's only how do you,
how effectively can you react to them.
- We'll come back to that as we
talk about growing in a little bit.
- Okay.
- How you bring other
management into that.
I guess my observation would
be a lot of founders split,
but the really successful
companies, it doesn't happen.
So Larry and Serge, Jerry and Dave,
you know Reid and Allen were together,
so many, many, many persist.
- That's true, that's true.
And those cases I think, or at
least last I went through it,
I went through kind of 20 companies,
and it seemed that there
was a fairly striking
kind of inverse correlation between
duration that they'd known
each other beforehand
and the subsequent outcome.
- Yeah, I think that's right.
And we'll hear from Nirav on Thursday
about his relationship with Sarah Leary
that's a decades-long
relationship as well.
Which actually brings up another point,
which is you read a ton of history.
So Patrick's a very, there are few
interesting people I follow on Twitter,
and Patrick's one of them,
and he'll be embarrassed that I said that,
but the most recent thing he tweeted out
is history about York's park,
which everybody should look at the history
York's Park, because holy smokes,
a lot of stuff came out of that place,
but why do you, you spend more time
reading history of everything, really,
than almost anybody I follow on Twitter.
Why do you do that?
- It's just, it's a way to cheat.
Everyone else ignores all
the good ideas from history,
and so you can just be much smarter
by just, you know, you
could just try to think
all these incredibly original thoughts
by sort of sitting down
and staring at the wall
for days on end, or you can sort of cheat
by just, you know, I mean they
are, in fact, written down
in books that you can just read.
And again, I can mean that
a little bit facetiously,
but I think that Allen Kay has this quote
about computer science, where he calls it
sort of pop culture, but
by sort of switching means
that sort of for most kind of communities
or sort of again, subcultures
or whatever the case might be,
sort of there's a progression, right?
Things build upon what came before,
whereas in computer science
and so much of technology,
it sort of is just like brownie in motion
through the problem space,
and sort of with no
account given to kind of
what's come previously.
And I think that sort of we
as an industry do ourselves
an enormous disservice by being so blind
and kind of blithely ignorant to it,
and right from sort of Engelbart doing
sort of the first demo,
I mean we've all kind of
heard of Engelbart as inventing the mouse
whereas sort of in
actuality what he invented
was so much more than that.
He basically invented ether pad
or like the first kind of realtime
collaborative word processor.
He had like video conferencing integrated
with the word processor.
You could annotate and
hyperlink documents together
in realtime, like he
basically had a better system
than Hangouts, as far as I'm concerned,
that he demoed in I
guess it was '68 or '67.
- [Professor] '67.
- '67, yeah.
And then if you look at
sort of what came out
of Park or I mean so much
of this kind of early work
that I think frankly
it's better than so much
of what we ended up with now.
That's not to say there hasn't
been sort of a lot of value
in kind of what's ensued.
I mean, we've solved all kinds of sort of
deployment problems and
technological problems
and scaling problems and so forth,
but in terms of sort of the core ideas
behind so much of it, I think that sort of
in some ways, there was
much better thinking
among some of the kind of, the creators.
And kind of in a substantial
way, I think that
like the kind of, the line of thinking
around sort of the early conception
of so much of this kind
of software technology
was about kind of empowerment of humans
and the kind of phrases
that were battered around
were things like
"intelligence augmentation"
and "intelligence amplification,"
"augmenting human
intellect," things like that.
So this is kind of the original
bicycle-for-the-mind idea,
which I think is sort of
incredibly potent, right?
Kind of how can we leverage this software
to make us more effective at sort of
whatever it is we might be doing?
And then I think that sort of so much of
kind of what's happened with the Internet
or kind of the modern technology industry
as we know it is either
sort of a very kind of
basic sort of functionality
around sort of utilities, right?
So it's not about sort of
high-level intellectual functions
as about just, I mean not
that it's not valuable,
but like how do I get a car come to here?
I'm really delighted
that that service exists,
but it's not sort of part of
that original line of thinking.
Or it's about basically entertainment.
It's about sort of the Internet
as sort of a more interactive
version of television,
which also has some
merit, I mean it's not,
entertainment has merit,
but I think there's been
a significant loss of that,
and I think that people,
I mean this is kind of
a longer conversation,
but basically to answer your question,
I think this is kind of
a systematic undervaluing
of tools and sort of undervaluing
and lack of appreciation
for the kind of impact
that that can have, because it's harder
to perceive and when you
do something directly,
you can see what it is,
whereas when you're enabling
something, you have to kind
of make that additional leap
and the way we often phrase it for Stripe
is that most technology
companies are building cars,
whereas Stripe is building roads,
that kind of distinction.
- I promise I'm going to get to scaling.
I just want to spend a
little more time on this.
A lot of things really
spoke to me on that,
so me and Doug Engelbart,
so Doug came in, did you
meet him before he died?
- Sadly no.
We had Alan Kay stop by and
speak at Stripe recently,
but I never met Doug.
- So AlanI want to talk
about a second too,
so Doug came to visit at Apple,
so Doug was at Juris Park,
and I remember he came in,
and we showed him demoes in probably 1999.
He's like, "Finally, somebody did this
"that I said 30 years ago."
And that happened like
five times during our demo.
Like, "Okay, fine."
But I think a lot of what happened
was it was a quieter
time, it was less noisy,
and so more people were thinking harder.
And so I think that
resulted in better quality
of thought overall about
what was happening,
and it's just shocking
to me that so many things
happened in the '60s and '70s and '80s
that are echoing now.
And even Alan Kay, like his other quote
was that point of view
is worth 80 IQ points,
which, what a brilliant quote.
It's like try to figure
out the right problem.
And if you look at it from the right
point of view, you win, right?
- Yeah, and I think it's really easy
to have this kind of
in a historical sense,
this rose-tinted view of history,
and I think there is kind of occasionally
kind of fascio way in which people say
x or y has been done previously,
and there's nothing
interesting being done today
and so forth, and I
think that that sort of
that misses the fact that so much
of sort of the details really matter
in software, right?
And that you can be
sort of 90% correct but
- [Professor] Completely wrong.
- That's like being merely
90% alive, right? (laughs)
And that sort of you don't get a whole lot
of partial credit, but
yeah, I wasn't around,
but I'm very curious why it was
that why this perspective did differ.
And I suspect part of it
was that it was quieter,
I don't know, maybe there was less
Facebook and Twitter and Tech Crunch
and all the rest, yeah, which maybe
speaks to my own way discredit,
but I think also part of it
is just kind of the ambition,
honestly, in the sense that, like,
there's a great book that
I recommend you all read
called the Dream Machine
by Mitchell Waldrop,
which I think is certainly
at least the best history
that I know of about
sort of the early days
of sort of technology
and the international
kind of the computer revolution.
And one thing that it sort of makes clear
is how it kind of, it wasn't at least,
kind of the book's
argument and thesis goes,
it wasn't inevitable that
sort of so many of these
things happened or so many
of these kind of ideas
were perculating, it was
sort of particular people
who had particular ambitions,
folks like Licklider
sort of originally of MIT
who kind of funded a lot of the work
that sort of led to the Internet,
and sort of I guess his
intellectual descendents
like Engelbart and Kay and so forth.
And I guess the optimistic view would be
that sort of a lot of that ambition about
sort of the power that
software can have on society
sort of can, in fact, be reclaimed
or at least that we're not sort of
gonna necessarily fall victim
to the noise that surrounds us today.
- [Professor] The Twitters, yeah.
That's why I'm spending a
little bit extra time on this.
- I'm actually, I should just say like
I think Twitter is a tremendous
sort of force.
- Oh, me too.
I kind of live on it,
so it's like I make fun of it,
and I'm a little bit
self-conscious about it.
But then the other thing I was gonna say
is that my models of computing
are Alan Kay's the Dynabook
which was essentially describes
Apple and client computing
and Xerox PARC, Ubicomp,
which essentially describes
terminals and Google.
And these are still
the two dominant models
of computing today, 50 years later.
And so when I look at client or server,
it's essentially Xerox and Xerox.
- Yep.
- Actually that's kind of it.
Okay.
So I was gonna ask you
what a philobiblist is
but I'm gonna wait till the end,
because I'm excited about that.
He had a word in his
eight-word Twitter bio
that I had to look up, but I like it now.
So let's talk about Stripe.
So how big is Stripe now today?
I think it's around 330 people.
- 330, and it's.
- As one metric at least.
- [Professor] And it's five years old?
- Yeah, it's actually getting a bit hard,
because do you count from
basically that dinner
when sort of John misled me
or from when we first
launched it or whatever.
But generally what I sort of count from
is when we launched publicly,
because we had fewer than
100 users at that point,
and we launched publicly to the world
September 30, 2011,
and so we just celebrated our
fourth birthday post-launch,
and so we we're kind of
effectively on the order
of five years from when we
really worked on it full time,
and then four years since public launch.
- Okay, so you're 330 people now.
A year ago, were you half that size?
- Yeah.
Probably this time a year
ago, maybe 160, 70 people.
- Yeah, so about doubling every year now.
Yeah what was it that Derek Schmidt said?
Doubling every year is possible,
quadrupling every year is really hard?
- Certainly we could not
quadruple every year.
- Yep.
So talk about how you're organized.
- This might turn into an evening class,
but well on what dimension?
Just in general how the company works or?
- Well, yeah, how you run.
Like do you have vice presidents?
- That's easy.
- Do you have managers?
Does everybody do whatever they want
like a holacracy?
What happens at Stripe?
- Yeah.
So the like the how
we're run bit I suppose
is that we're wildly
conventionally organized.
And that there's always such a temptation
sort of when you're starting out
to go and sort of reconceive
the nature of humanity
and how people can
collaborate and coordinate
and so forth, and that
basically you should really
kind of try to discourage
that inner voice,
and I think it sort of
comes from a good place
where you want to kind of reconceive
all of these things, right?
But there's two problems with that.
The first is that you kind of think about
what risks you're taking in the business
and sort of empirically the
standard means of organization
are sufficiently effective
to create the Googles
and the Facebooks and the Intels
and so forth of the world,
and so I mean even if,
just posit that sort of
you're actually capable of
conceiving a more effective way
of having tens, hundreds,
thousands people working together,
whether you actually need that
to achieve your actual goals,
and the second one is that
probably all of the problems
with any alternative
that you could conceive
are things that you haven't been exposed
to today, you just don't
have the life experience
to sort of anticipate.
And so basically whatever you think
you should probably do instead,
you're almost certainly wrong.
- So let's stay on that for a second.
- Okay.
- That's an unusual thing
for a Silicon Valley person to say.
- Don't innovate, yeah.
- Maybe old people know
what they're doing,
because they've done it before
or they've lived through it.
Can you break that apart a little bit?
- Yeah.
- As an old person, I'm excited about
this line of questioning.
- (laughs)
I think that, well, technology
changes a lot, right?
And so I think the right
answer is a function
of the current technological
equilibrium, right?
And so if an old person thinks
that such-and-such is a bad
idea or something like that,
I mean there's an
excellent chance that now
some period of time later,
they're wrong, right?
Because a dependent
variable has changed, right?
But people aren't changing a whole lot.
And so instead of whatever
the optimal system was
kind of some period of time previously
is I think your default prior should be
still probably a pretty good idea.
I caveat that with
I think if you look at the
history of Silicon Valley,
things are in fact changing,
even though people themselves
aren't changing that much,
because I guess just the environment,
people's expectations and
so forth are changing,
and secondly I think that a
discount factor on how well
we do things is that
people do copy too much
kind of this memetic force at play.
My favorite example of
this is kind of standard
Silicon Valley interviews.
I can't remember his name, Google's HR.
- [Professor] Laszlo Bock.
- Laszlo Bock, right,
wrote this great article
for the New York Times
where, as I recall, he sort of admitted
they'd observed almost no correlation
between GPA and indeed Google
sort of interviews themselves and sort of
the subsequent performance
at Google, right?
And that certainly was the case for GPA,
I can't remember if it's
the case for the interviews,
but and sort of like
essentially every company
does the same sort of
algorithm-style interviews
and coding on a white board and so forth
and essentially everyone, at
least everyone I've talked to
kind of knows that it
doesn't really work, right?
- [Professor] Yes, it doesn't work.
- And yet nothing changes.
And it just seems so insane, right?
And as far as I can tell,
you want to be successful,
you look at what the
successful company does,
they do algorithms and
interviews on the white board
and so forth, and so despite
the fact that most technology
companies are not about writing
algorithms on white boards,
that you sort of want to
translate and bring across
what it is that they do,
it's just surprisingly
robust and resilient,
and so we don't do that, we
just try to think about, well,
what it is that people at
Stripe are actually doing
day-to-day, I mean they're
writing code on laptops,
and so our interviews are largely,
we've wrote a Quora answer about this,
but it's largely writing
code on your laptop
in the environment you're familiar with
and experienced with and so forth.
And it works really well,
and then when people join,
they're generally pretty good
at writing good code on laptops,
and there's this, again, discount factor
where I think people just,
there's too much inertia
in the existing ideas.
But having said that, in
terms of just the organization
of a large group of people,
default is to trust the mechanism.
- Yeah actually it's a lot of technology
which is core processes that run a lot,
it's really worth figuring
out first principles,
and for you that's recruiting.
- Yep.
- But invention is really hard,
because it means kind of dealing
with unintended consequences.
There's a lot of things that happen
when you do things differently
than anybody's done it.
- Right.
- There's no maps, there's no guidance.
- I think there's also kind of a question
for the cost benefit, right?
In the sense that like
if you can be sort of
somewhat better even
epsilon better on recruiting
sort of maybe that
actually matters, right?
Whereas for a significant fraction
of the things that have
to happen in a company,
you can fail if you screw them up,
but they're not going to be the things
that sort of create outside
success by themselves,
and for those again it's just probably,
even if you posit that you're right,
that you can do them better
than all of your kind of
mistaken predecessors,
is it really worth
spending your time there?
Because fundamentally,
that's the most constrained resource.
- Right, yep, okay.
So you talked about
your laptop interviews.
You guys have a reputation
that you well-deserve
for being excellent at hiring
very, very, very good developers.
How long did it take before you started
doing laptop interviews?
And has it changed now
that you're 300 people?
- Yeah, so I think, well,
it's always so hard to know
for anything was good or bad at Stripe.
One, it's hard to know
whether it is actually
good or bad or whether
that's just perception.
I mean in the case of
hiring I actually think
we lucked out.
You're never sort of entirely sure.
But then secondly, how much was kind of,
you can never kind of piece apart
the attribution of all the
different factors, right?
And so for example one thing
I think we benefitted from
was the fact that Stripe
builds software and tools
for developers, for engineers,
and so I think there's
kind of more of an affinity
than, I mean, for some randomly
selected other product,
how much did that factor
matter, I don't know, right?
Potentially, all of it
can be attributed to that.
And in fact the different ways
in which we did interviews
is completely inconsequential,
I don't quite think that's true.
I think probably the biggest thing,
aside from how we interview folks,
that we did differently is just being okay
taking a really long time to hire people
in that, kind of the received wisdom is
work really hard to hire the best people,
and you're like, "Gee, thanks, I was going
"to do the opposite, but
now that you've said that,
"I'll work really hard
to hire the best people."
And so I guess the question is sort of
to what lengths should you go
and kind of what does that
actually mean in practice.
And in practice it means being okay
waiting a really long time to hire people
and having to be painfully
persistent in doing so.
And so it took us, let me think,
took us a year, well it took me six months
to hire the first two people, so.
- That's the same story
that Sam Altman told about
about Airbnb I think,
took maybe nine months.
- So a person per quarter
even though we had
this kind of network already
and knew all these people,
we managed like one every three months.
And then in I think the
six months after that,
we maybe hired another
three or four people
kind of on that order.
We had week-long trials with them,
we had some of them kind of network out,
in many cases, they sort
of thought they didn't
want to join, and so it was kind of like
this three-month life
conversation about it,
- [Professor] (laughs)
- I mean therapy session of sort of
what the best thing for these
people to be doing would be.
And this is I think what you find
when you're trying to
hire the best people,
because you can kind of go either sort of
you can filter first by kind
of, by expressed interest
or something, and then you can sort of
secondarily filter for okay,
and which ones are good,
or you can first look for the good ones,
and then try to sort of convert
them to expressed interest.
And I think that the latter
is the more effective way
to go about it, but then that means
you have to sort of turn
this aircraft carrier,
where I mean if you just
think kind of ex-ante about
- The aircraft carrier's the candidate
you want to go get.
- Exactly, right, yes.
Bit of a tortured metaphor,
but you just think about the
smartest people you know,
and you want to get them
to work in your thing,
I mean chances are, as
far as people you know,
- Are working already.
- Yeah, they have pretty good paths
ahead of them, right?
- Yep.
- And to sort of consistently
try to rotate these
just takes a real long time.
And so there are multiple
people at Stripe now today
who took us several years to hire,
like, I can think off the top of my head
of five people who took
three plus years to hire.
- Yep.
- And the idea is sort of
that when you're so early
in the company's history
that you should be
kind of investing in people for whom
it might take that length of time to hire.
- [Professor] It seems
a little crazy, yeah.
- It seems kind of crazy, right?
So I think maybe apart from sort of
interviewing people sensibly,
I think the big thing that
people have to keep in mind
in sort of early stage company recruiting
is just you have to be way more persistent
and be okay with it taking way longer
than any sane or reasonable person
could think it should take.
- Yep and that's what Drew
Houston says about Aditya,
he says they tried to
get Aditya and Ruchi,
Aditya runs engineering, for over a year.
They had to acquire his
company to get him to do it.
- Yep.
- You know, I was reminded, I'm
involved in a search company
in Palo Alto, and it's
about two years old,
but the painful, the vicious cycle
is that you're going so
slowly when it's the first
two or three people, and you're like,
"Holy smokes, if we could just
get another set of hands,"
but you don't want to do it,
but we talk a lot in this
class about compound interest
and the value of compounding interest,
like if you get just one great person,
that makes it marginally easier
to get the next great person.
- So I think it's that dynamic in spades,
and then secondly I
think, kind of another way
to think about it, maybe
makes the importance of it
and potency kind of clearer,
is that you have to imagine the light cone
or kind of the tree of all of the people
that this person will hire,
and so rather than just thinking about it
as kind of do I want this person or not,
it's like, "Do I want this person
"and the 50 people who
I think they will hire?"
Because even if they don't
literally hire 50 people,
they will be kind of so influential
in determining the self-selection
of those 50 people,
and so you're really
picking this giant branch
of a potential future organization.
- Yep, and then there's something where
you get to a critical mass and ultimately
you get a new chunk where they all believe
that it might not be crazy
to go work for this startup.
- Yes.
In our case, it took a long time.
- A couple years' struggle.
- Right.
And that kind of also
gets into sort of networks
and so forth where sometimes you,
these things can kind
of compound more rapidly
because they're not completely
independent variables.
- Right.
So it sounds like you had the sense
that you had product market
fit at the very beginning.
- Right.
- You did this thing, and
people started talking about it.
Is that true?
- Yes and no.
So yes in the sense that
from the very beginning,
sort of shockingly, this
idea of, I mean, again,
it really doesn't sound promising I think
certainly a lot of people we talked to
didn't think so, sort of a credit card API
that was really simple to use over cURL
and you could set up instantly,
you're not immediately like,
"All right, let me invest."
- Yeah.
- And indeed, most people weren't.
But that in fact turned out
to be a pretty good idea
and it ended up playing into
all these kind of larger
secular trends and like the rise of mobile
and the shift from
advertising-based business models
to transaction-based business models
and things like that.
- You know that wasn't that much
was really associated with mobile.
- No, but I think it was just kind of
there was actually, it
was kind of a period
of high turnover in the industry,
and so kind of more things were getting
rebuilt from scratch and so forth, right?
- Yep.
- And then, and also product disappearance
was becoming more important.
- Sure.
- And so just bouncing
people to some other website
to pay was just not viable.
- Yep.
- And so there was kind of that.
But then I think kind of the second aspect
which kind of, in which
the product market fit
wasn't quite there from the outset
is in sort of the additional
stuff that happens
kind of on top, in that for example,
one of the most successful
things we've launched
is the thing called Connect,
which basically enables people to sort of
to pay other people with Stripe,
is kind of the verbacial
way to describe it.
And so you think about all
these new marketplaces, right?
And so Instacart and
Postmates and Doordash
and Ship and so forth, right?
Are you an investor in Ship?
- No.
- Okay, sorry.
Somebody thought you were.
- But I use them all.
- Okay, yeah, great.
Lift, Uber, Airbnb and so forth, right?
And so tons of these companies,
in fact I think the vast majority
are built on Stripe, right?
But that requires this
additional set of APIs
that we call Connect in order to do so
and to sort of coordinate
all these payments
and keep track of them
and sort of help them
handle the tax issues
and the whole ensemble
of factors.
And so there are a lot of additional APIs
we ended up building on top of this really
basic transaction processing part.
But I think people don't quite,
or it's difficult to understand, right?
Because it's kind of like AWS
in that people kind of know, well,
they do kind of the EC2
thing and the S3 thing
and there's a bunch of other things
and kind of actually in the details
building infrastructure.
It's pretty hard to keep
track of all the other things,
and I think Stripe has a similar dynamic
where that initial
component was a very good
product market fit to
but in order to actually get here,
a huge amount of additional work
that had to happen and
invention that had to happen
that's just basically hard to understand
without a lot of context.
I think that's something
that for better or worse,
Stripe has faced for its history,
where people kind, well
because it's kind of hard
to assess from the outside unless you know
a lot about the domain,
kind of the bad part of that
is people just kind of don't get
what Stripe does or why it matters
or in what way it
manifests the consequence,
and the good part is competitors also
don't really get it, right?
And so Stripe got to this point
sort of pretty easily, and
so it kind of cuts both ways.
- That brings up a lot
of different questions.
So one of the things I heard in there
is that there are successive
product market fits.
- Yep.
- Like your different signs,
they don't all come together,
sometimes are spread out,
sometimes you have to get
product market fit in one place
- Yep.
- to let you build to
realize you don't have it
in another place.
- Right, yes.
- Does that sound right?
- I think that's exactly right.
- And then so fast-forward to 2015.
What scale are you at today?
Like how do you talk about scale
when you're talking to the public?
- We've, well this gets
to sort of another issue
of sort of to what degree
you should be forthcoming
about your business metrics.
- Right.
- And we've always been in the school
of not being.
- Yeah, okay.
- And so I think the
current public things we say
are we handle billions of dollars a year
for, we actually recently started saying
hundreds of thousands of businesses.
- Okay.
- And that's kind of about it.
But I mean it's become the default thing
that technology companies use
when they want to move money
around on the Internet.
- Well that's a somewhat broader thing
than saying you have hundreds of thousands
and billions, so saying you're the default
is a good thing to say, it's
the thing you want to say.
Sorry, I'm trying to
back out to a different
set of questions.
So talked about scale.
Let's talk about, oh,
you talked about Connect.
I was reading one interview
where basically somebody said,
"Well, look, don't we have PayPal?"
It was in PayPal fine.
- Right.
- You said, "Well, PayPal's
not really what we do.
"PayPal's for person-to-person transfer,
"party-to-party transfer."
That's kind of what you describe
when you were talking
about to Connect to me.
- Yeah, right, and this is a great example
where kind of at a high
level you're like oh.
- But BNC doesn't understand
at all what you're doing,
so we'll ask you to
explain in small words.
- I'm not sure which interview this was,
but where it really gets down to details.
And so kind of the critical difference is
are you building software
that sort of coordinates these,
this kind of network of
money flowing, right?
I mean like what Lift needs
or what Instacart needs
is very different to the experience of
"Oh, I'm gonna pay my friend."
- Right.
- With Lift, it's I mean
you're gonna mechanically
sort of coordinating this payment
between the rider and the driver
and that like Lift is
mediating that payment,
and then sort of all these
additional considerations
around it for like "What happens
if it has to get refunded?"
Or like "Actually the
amount can be different,
"because you can give a tip to the driver,
"and maybe it'll get charged back later,
"and it has to work in
different countries,"
and so in practice,
completely kind of different
problems face us.
I mean I guess the problem we face
of person-to-person payments
is how do I do really
frictionless onboarding
and honestly how do I have people
not forget about it,
because people don't actually practice
paying their friends all
that often but whatever.
- [Professor] (laughs)
- There's like super
different problem spaces,
but on a high level, you're right,
both involve money going
from one person to another,
and so that really being kind of,
basically without kind
of talking to the people
building the app sort
of hearing their issues
directly firsthand, they do kind of sound
superficially similar.
- And so I guess then you would say
your product suite now is a really
straightforward authentic expression
of your original thing,
which was people make apps,
and they'd like to get paid for them,
paid by their customers and sometimes
pay their suppliers out, is that?
- Yeah, no, I think
that's basically right.
So the way we kind of
came to think about it
was kind of two dimensions
or maybe three to it.
So the reason we decided
to drop out of school
or maybe go and leave.
- (laughs)
- was because we realized
that just in general
the market as a whole was actually tiny,
and so you kind of hear transactions
on the Internet, you know,
that's kind of been done
or something, right?
But you need to just look at it
from a high-level standpoint,
and you sort of look at the total figures,
and about, certainly
at the time, 2% of all
consumer spending was happening
through the Internet, right?
And so kind of as a total industry
commerce on the Internet,
was kind of 2% of the starting block
so whatever happened to date
was incredibly early in
terms of the ultimate curve
of what's coming.
The second one was just kind of
more directly looking at
sort of the global aspect
where the smart phone is kind of how
the Internet is reaching
the rest of the world
and again we were really early
in that process happening,
and so there were all
these incredibly promising
niche end markets and
China, India, Indonesia,
Brazil, et cetera, right?
And then the third one kind
of to your Connect point
was that businesses were building these
increasingly just complicated
transaction-oriented services,
and I mean Connect is a good example,
but Crowd Funding is another, right?
They were sort of Kick
Starter does not monetize
or facilitate advertising.
They facilitate just this completely new
kind of transaction, right?
And so realizing this was increasingly
at the core, not just
partially, but at the core
of what the next generation
of companies were doing,
like if you think about it, Airbnb, Uber,
Kick Starter, Instacart, Lift,
- [Professor] Everybody interesting.
- Yeah, they're kind of these new kind of
real world economic relationships
where it's an integral part,
and so the belief was that,
well, there's gonna be
a lot of those and sort of the use casers
are going to get richer
and more complex over time,
and there needs to be
a completely integrated
set of tools and APIs to
facilitate the whole thing.
- Okay so I'm gonna ask
a bunch of questions
about engineering and staff
and product definition
and organization, but you guys get bored
if you don't ask questions.
Do people have questions at this point?
Or should we keep going?
- [Voiceover] How did
you go about setting up
the sort of back-end relationships
with the credit card
processors and all that
when you were really small?
- Right.
Good question.
This was one of the hardest parts.
In the beginning, we sort of worked with,
this part might be partly off the record,
but in the beginning we worked with,
there was a guy I met at a party,
and his friend ran a payments company.
It was like a tiny little operation based
out of the Midwest,
and they agreed to let
us build a prototype
on top of their thing and just didn't ask
too many questions.
And so when you instantly
create your Stripe account,
John and I got an email,
and we'd go and like
fill out the paperwork and
submit it to this company,
and instantly set up your Stripe account.
- [Professor] For real?
You put manually?
- Manually.
- [Professor] Wow.
How many did you do it like that?
- Dozens.
- [Professor] (laughs)
- And actually that worked really well,
because the salient point was
they didn't have to do it,
the user didn't have to do it,
and we were fine doing it for them,
and actually, it's a separate
line of conversation,
but there were a lot of things
where we just sort of
manually did it ourselves
for a very long time.
And then we went and
we met with Wells Fargo
and sort of described what
we were doing to them,
and we'd gotten instruction
through somebody and so forth
and they unequivocally said that they had
no interest in working with us,
and so it was like hmm.
And then, it was getting
increasingly frustrating,
because it was growing,
and we were having to fill out
more and more of these forms, right?
But we sort of had no
route to something better.
And so we asked one of our early investors
for advice on this.
It was a guy called Geoff Ralston.
So Geoff had been a CEO of Lala,
which was kind of like an
early version of Spotify,
and they were one of
the first kind of legit,
legal music services,
and they'd gotten deals done
with all the record lables,
and so we kind of thought who do we know
to get a deal done with a bank?
Well Geoff got a deal done
with the record labels,
- [Professor] (laughs)
- I mean, you can deal
with the record labels,
you can deal with anyone.
And so we went to Geoff
and we basically said, you know, "help."
And he's like, "Oh, I
didn't actually do all these
"deals with the record labels."
It was actually one of Lala's
co-founders, Billy Alvarado.
And so he pointed us to Billy,
and so John and I met with Billy,
and he had actually,
Apple had bought Lala,
and Billy had just left,
and I think, I don't know,
maybe Billy was bored, and so he's like,
"All right, I'll help you
kids out a little bit."
And so he actually ended up joining Stripe
as maybe the fifth or sixth person.
And we were like, he wasn't an
engineer, and so at the time,
- [Professor] You had a BD guy
as your fifth or sixth person.
- Yeah, yeah, and so, and
we were really torn over it,
because it was like.
- [Professor] That's super
surprising for a company
that's so engineering.
- No, no, no, and we were like,
"He doesn't write code, I mean,
"should we hire a person
who doesn't write code?"
- [Professor] What does he do?
(laughs)
- What does one even do
that's not writing code?
And so we were sort of sharing this
kind of inner anguish with Geoff,
and Geoff, to his credit,
was commendably patient,
and was like, "Patrick,
one, stop being an idiot."
I don't think he said idiot,
he said something stronger,
but for the sake of the record,
I'll say he called me an idiot.
And he's like, "You
should just hire Billy."
And I remember he promised me
that if it didn't work out,
he would go back and retroactively
pay Billy's salary, so he was like,
"So there's no downside for you."
And at the time, we didn't have
a whole lot of money, and so that's.
- [Professor] So that mattered.
- Yeah, absolutely.
And so then we hired Billy,
and Billy is still at Stripe
and is one of the most
important people at the company.
- [Professor] How did you?
- No actually, just a second,
and to finish the story,
so then basically Billy
went and solved Wells.
And so it, I mean,
there's a whole separate
line of conversation to be had about
how to do business development effectively
and we were really bad
at it in the beginning.
I think it's actually a
very interesting question,
how should a startup
partner with other entities,
and obviously that's a
pretty important part
of what Stripe has to do.
And Billy sort of taught
us a hell of a lot,
but about two months after Billy joined,
we had the requisite
relationship with Wells Fargo.
- Wow.
I was gonna ask, how do you even
evaluate how he's doing?
Because he's such a different background
situation than you.
- Right.
- I guess he just did magic things
like bring Wells Fargo in so he's probably
good enough, yeah?
- Yeah, we're kind of at the point where
there were fairly discreet things
that had to happen or not.
And so in that sense, it
was fairly assessable,
but there were also a
bunch of other things
where (laughs) he knew, I
mean he'd basically been
through a real startup before in Lala
and so for example, I remember him asking
pretty early on how we do payroll,
and we're like occasionally we multiply
the agreed salary by length of time
since people were last paid
and give them that money.
- [Professor] (laughs)
- And he's like, "What about deductions
"and tax and all these things?"
And we're like, umm.
- [Professor] Really?
- Yeah.
- [Professor] Wow.
Awesome.
- (laughs)
And so there's all sorts of cleanup
that Billy helped us through.
- [Professor] It's good to
have people who clean up.
- (laughs)
- Okay so I think I know this question.
So I think you guys had such a clear
product value proposition, I was gonna ask
about how you decided
what things new to do.
- Right.
- So I think I have a guess
now, listening to you talk,
but can you talk about it for a second?
- Yeah.
So I think this is a pretty hard question
when you're building a consumer product
because consumers don't really
know what they want, right?
I mean in that this is sort
of the challenge for Facebook
where it's, you're dealing with all these
mercurial teenagers,
and the greatest minds
of our generation are staring intently
at all this data trying to figure out
what do the millennials want,
but that's very difficult.
To be clear, to their credit, they've done
a fantastic job of keeping abreast of it
with all the acquisitions and so forth.
But it's hard.
You can't just figure
it out through analysis.
- [Professor] Right.
- Or these people haven't
figured out how to yet.
Whereas when you're
building for developers,
you can just cheat again,
you can just ask them, right?
And in fact even if you don't ask them,
- [Professor] They'll
probably tell you anyway.
- they're frequently relatively vocal
in their preferences and desires.
And so I mean,
- But that's a little glib right there.
- I was gonna say, right?
Because you prioritize
and which ones, right.
And so we pay a lot of attention
to who we judge to be the
ones with good judgment.
And you also have to fit the whole thing
into a long-term perspective
of how these pieces
fit together, and how the
product ought to evolve
and so forth.
One of the, I remember
Mark Zuckerberg commenting
at one point, I think this
is kind of good advice,
that this is, in general,
I think kind of the value
over-mythologizes kind of
the role of the founder
and the criticality of
that person and so forth,
but he commented that it's very important
for the CEO to be sort
of integratively involved
in a lot of the micro product decisions,
because what's optimal to do
on a one-year time horizon is often
quite divergent from what's optimal to do
in a five-year time horizon,
and it's just difficult for anyone
other than the CEO and
especially the CEO founder
to have this long time horizon
kind of in their optimization function.
- [Professor] Yep.
- And so I think there's a
fairly important aspect there.
But yeah, for us it's I
would say 70% listening
to the people who we think are
either have really good judgment
or are themselves likely
to become really big,
because kind of just in and of itself.
- [Professor] Ip facto.
- Exactly.
And then maybe the other 30%
sort of doing things we
think ought to be big
but for some reason we're
not being asked for.
And a good example of this is we
built this integration with Alipay.
Alipay is kind of like
the PayPal of China.
So many of these things in
China have this kind of.
- [Professor] They're pretty big.
- Exactly, kind of eye-watering scale.
- [Professor] Growing pretty fast.
It's gonna be bigger tomorrow.
- And we'd have all these conversations
with businesses where we're like
and we have this Alipay integration
so sort of everyone in
China can now buy from you,
and the businesses would say,
"Well, I don't know if
that's relevant to us.
"We don't actually sell
that much in China."
And we're like, "Let's just think through
"the logic of that statement."
- Yeah.
- And why it might be that people in China
aren't buying from you.
And then they'd often be
like, "Ahh, good point."
And add Alipay and so
things could go well.
But 70% I would say being led
by the smart companies and developers.
- Right.
And then how do you,
well two different questions.
So how's Bitcoin related
to something like that?
So Bitcoin looks like developers
get very excited about it.
Do you guys get excited about it?
How do you think about big clientele?
All developers say, "Oh
my gosh, let's do this."
- Right.
- Doesn't feel like a
thing that's huge yet.
- Yep.
Definitely not huge yet.
I think that you have to be somewhat okay
with making, I guess multiple people have
kind of made the statement
that you can't judge
decisions by their outcomes,
and at first blush, that sounds
like a strange statement,
but I think kind of what
it gets at is this idea
that you have to judge
decisions by their EV
rather than by the particular outcome
that in fact resulted.
- [Professor] Right.
EV, expected value.
- Sorry, yeah.
And so even, I mean certainly at the time
and even now, it's not completely clear
sort of what happens to Bitcoin,
but I think that even if the probability
is relatively low, sort of
the potential significance
of some success outcome is large enough
that it's probably worth
keeping abreast of it.
And also I guess we felt
some just general affinity
to that community.
I mean I don't personally nor I guess
does Stripe subscribe to these
sort of crypto anarchists
sort of let's liberate
ourself from the tyranny
of our monetary oppressors
kind of school of Bitcoin.
- [Professor] (laughs)
It's bigger than it sounds like.
It's bigger than you think.
- (laughs) I just realized recently
that probably that the
original PayPal client
firm Satoshi, it's
probably the first paper
that sort of you know both the paper
and political science and then CS.
- [Professor] It's a beautiful,
everyone should read at least,
it's seven pages long, it's beautiful.
- Right, right.
- [Professor] And like
slightly insane but beautiful.
- Yeah, yeah.
- [Professor] Insane in a good way mostly.
- Yeah I mean whatever the first block
has the New York Times
from the financial crisis and so forth.
Anyway, it's definitely
a strong political agenda
but I think the kind of the
distributed systems aspect
and honestly the idea of sort of
a decentralized infrastructure
that sort of can be
a system and a ledger and so forth
very sort of so much of the substraight,
I mean, that's kind of a cool idea, right?
- [Professor] It's beautiful, yep.
- So we wanted to do a
bit to help move it along.
- [Professor] Okay, so who
runs product at Stripe?
- So, well we have a bunch of different
product engineering teams,
and some of those teams
have product managers
on them, not all of them do.
They are, without actually
counting maybe five or six
of those teams, and not all of them
are kind of formally
broken up and so forth.
And then there is a
single engineering manager
who manages all of the
managers on those teams,
and then I manage.
- [Professor] The product managers
reporting to an engineering manager.
- So the product managers report
to the single manager for
each of the product teams,
and that person manages
the product manager.
- Cross-functional management.
It's a management management engineers
and product.
- Okay so the problem is that
I guess there's product managers
and this is like product
in the engineering
sense of the product, but
just the simplification,
oversimplification is that
there are these products
with teams associated with them,
there's a single manager who manages
all of the product, and
then I manage that manager.
And so kind of who runs product at Stripe?
I mean it sort of depends on the product,
because the team does first and foremost
and then I guess also that manager
and then ends up with me.
- Yeah I guess the reason I asked
is because you just noted
how important it was
to have a CEO and founder in the details
- Right, yep.
- in a lot of things,
and that tends to create
a structural instability for what
you usually call VP of product,
that's a brutal role,
- Right.
- because you're either in a company where
the CEO founder is micromanaging product
or you're in a company where
they totally empower you to run product,
- Right.
- and then you have the message
of the CEO doesn't care about the product.
- Right.
- And so it's a hard place to be.
- Yeah.
And so I mean the I guess
part of what you're getting at
is a lot of companies sort
of there's this separation
between, say, the engineering kind of org
and the product management function.
- Right.
- And then sort of the VP product,
the person overseeing this
product management function
if the CEO is really closely involved,
that becomes of a pretty thin
or at least difficult role, right?
- [Professor] Mostly use spreadsheets.
- Well I've never seen
one, but okay, yeah.
Whereas in our case, we don't
have a separate product org,
- [Professor] Right.
- and so I mean this engineering manager,
I mean there's a vast amount in that job
even sort of leaving particular
product decisions aside,
because it's all the questions around
how do we staff them and build them
and execute them and operate them
and all these kinds of questions,
and so she is sort of fairly involved
in the actual product decisions, as am I,
but I think it avoids the
kind of VP product issue,
because even if there
was zero product decision
in the role, which there isn't,
but even if there was zero,
there's still a huge amount
in all the other parts.
- [Professor] Making things work, yeah.
- Exactly.
- Yeah.
That's intersting.
I wonder if that will, I wonder
how long that will scale.
It's a little bit unusual
not to have them separate out
some eventually, you get
to some product scale.
- Yeah, well, again, I think part of this
comes to the fact, the way
in which Stripe is different.
We're building, not
solely, but in large part
for other engineers.
- Right.
- And so I think engineers
can have excellent instincts
for sort of what the
right product to build is.
- Yeah, yeah.
- Whereas when you're trying to kind of
empathize or put yourself in the shoes
of some completely different kind of user,
then perhaps kind of the impetus
for a separate product org is greater.
- Interesting.
So you've done product exemption,
and you've done new things,
you did Connect, some other things.
Have you launched products
that you've killed?
- I guess this is an availability bias
in the ones that
immediately come to mind but
I don't,
we haven't launched,
well actually (laughs)
part of what I think what's so difficult
and feels so tragic when
you're in the throes of it
of sort of a fast-growing startup
is that product innovation slows down.
And you're like why would that be?
I mean you guys launched with ten people,
now we're 330 people, how
could it possibly slow down?
- [Professor] Right.
- And I remember observing this
even before I was kind of in it myself
where for Airbnb and DropBox,
and these other companies,
it felt to me as a user that basically
the product innovation slowed down.
- [Professor] It stopped.
- And I guess what happens is this kind of
there's so much investment
that's required.
So one there's sort of investment required
just to keep up with the growth, right?
And so I mean the ten people who built
kind of the original Stripe,
they weren't capable of
operating current Stripe.
Operating current Stripe requires
sort of all these resources, right?
- [Professor] Yep.
- But then additionally,
you have to sort of,
I mean because you're
looking to do more things
and both iteration of what already exists
and build new things and so forth
until you're learning to
sort of walk and chew gum
and juggle and tap dance
and all these things
kind of in parallel.
And that requires hiring a lot of people.
And then you have to
train all those people
and just kind of how the company works
and the product works and all the rest,
then they kind of have to all have learned
in this emerging process of
how to coordinate together,
then actually relearn that several times
because it sort of constantly shifting,
there's this sort of dynamic equilibrium
beneath them whatever,
and so the net effect is that the product
actually advances surprisingly slowly.
I think the flip side of it is that
when you come out of
this if you do it well,
then it's like stand back, right?
Where it can be so fast,
and I think Facebook is
actually a good example
of a company that sort
of went through the slow
and then really sped up.
- [Professor] Yep.
- But sort of the
- [Professor] The mobile
years, early mobile years
were pretty hard.
- Exactly but the rate
of product improvement
actually has been surprising shape.
- [Professor] Yep.
- And so and also you can measure
in different axis in terms of
sort of sustaining and improvement
versus kind of new axes
and orthotic improvement and so forth.
And anyway, all of which to say
we haven't launched all that many
kind of discreetly new things,
things you could conceivably
then kill, I mean
we've built little features
and things like that
that haven't worked out super well.
We've tried experiments and
so forth that haven't worked,
but nothing kind of epochly kind of new.
Although part of that also gets to I thnk
how we build products,
which is we, we're pretty, I mean, again,
because we work with developers,
and because they'll give
you pretty good feedback,
we often run ideas by them,
we'll build a little beta,
we'll test with them and so forth,
then if they don't like it
or if they don't think it's a good idea,
then we'll kind of just
stop working on it, right?
And so by the time
something gets to launch,
it's generally gone through
quite a bit of validation.
The things that have been
really launched launched,
- [Professor] Pretty useful.
- Exactly, yeah.
- [Professor] Okay, so
a couple more things.
Oh, sure.
- [Voiceover] Can you talk about any
early acquisition offers you may have had?
- Yeah.
So we've always been pretty explicit
like in the press and
any meetings we've had
and so forth that we're just
not that interested in it,
and so you can't be somewhat successful
or well, to have been successful,
sort of for any kind of thing,
it's kind of hard for that to happen
without all these potential acquirers
just kind of I think sniffing around
is kind of the right term.
They don't necessarily
have that much interest,
but they're kind of interested.
And also one tends to think of sort of
potential acquirers or
other companies in general
as monolithic entities,
and now coming back to the BD point,
I think one of the critical realizations
is that companies are composed
of sort of a pretty diverse
array of individuals,
and you're not talking to a company,
you're talking to a person.
And you need to kind of
really piece that apart.
And so anyway, we never
had any serious discussions
with any acquirer in
the history of Stripe,
and we were sort of pretty quick
to close off any kind of
sniffing conversations,
just because it wasn't
what we were out to do.
Actually there was one place where
our prior company had
kind of gone through this
sort of talent acquisition,
but we'd gone through
an acquisition process,
and I think that was kind of helpful
in showing us kind of
what that looked like,
and it enabled us I think to be much
I think clearer ourselves in terms
of what we wanted.
- Like once you've been
through the acquisition process
for a sort of okay company,
it really encourages you
to notice what's special,
what's working in the place you're at,
because it never quite
works out the way you want,
and it also just highlights like
it's unusual for companies to be
as special as Stripe or as special
as other things, and when
you find something like that,
you really have it working,
you really want to hold onto it.
May I ask you a technology question?
So I would view, I think you look around
and say, well Stripe's
probably the most modern
payment stock today.
So how do you, but you're also growing
your customer base.
Your customers don't necessarily want
the most modern payment site,
they want the one that's stable
and the one that works,
doesn't change all the time.
And so how are you gonna think about
technology change going forward?
- (laughs) I think that
is a great question.
And it's something we're mindful of
from the beginning in developing Stripe
that you sort of have to
build all these things
and sort of invest in different ways
to enable you to kind of innovate
sort of without being problematic
on that kind of other reliability axis.
- Yep.
- And so for example, we have this
kind of really complicated
versioning system
for the Stripe API where sort of
there are all these different sort of
translation layers composed
sort of help turn one API version
into the prior one.
- Wow.
- So basically people can
be on almost any version
that we've had over the
last couple of years,
and everything works just fine.
We recently went and depricated
a Stripe API version from like 2010.
That was kind of like a big deal for us,
and we looked through and we're like
three people still using it,
so we're like, "All right, we
can reach out to these people
"and tell them we're no
longer going to support it,"
but sort of as a default matter,
but see anything we ever released
we're gonna sort of commit
to keeping it to work,
and that kind of required like.
- [Professor] That's easy
to say and fairly hard to do
over a long term.
- Well, exactly, it's been hard to do that
and also enable you to sort of change
lots of things, right?
And that's kind of where this translation
there kind of comes in,
and so that's kind of an example
of the kind of thing you have to do
in order to enable that.
But for us, it's a constant process
of sort of of revisiting that, right?
Because I mean you can
have these two axes again
of reliability and, I
hate to say innovation,
but innovation, and to, you're
trying to expand them both,
because you atually want to
get more reliable over time,
obviously, right?
And also kind of the difficulty in being
reliable over time just
because more stuff increases,
and you also want to be
doing more things over time,
and so I think I have a pretty good sense
for where the right
tradeoffs kind of being
kind of a year ago but sort
of in the current state today,
it's something we're
literally, and I was having
this discussion last night
with a group of people.
And I will say that the general thing,
and I think this is a
testament to the engineers,
I think Stripe is just
one of the most reliable
infrastructure providers
just period, right,
in that the total availability record
for the APIs as a whole
has been remarkably solid.
And I don't know, I guess,
I know I can write code
and so this is no credit to me.
- (laughs)
- I don't know, I'm sort of impressed
from a slight distance.
- Okay so, I'll ask a
couple management questions,
and then we'll open it up.
So you said 330 people,
so well the dumb bar number's
well in the rearview mirror,
150 people is over a year ago probably.
So what do you do differently now,
I mean you hired Claire as COO right?
- That's right
- What else do you do differently now
than you would've done a year ago?
And how do you think about this stage?
- Yep
- From a managing the company standpoint?
- I think the big change,
I'm sure other speakers
have said this or well actually first
I should preface everything I say here by
I mean I guess it's, I
feel like I'm sort of
a bad person to be speaking on this stuff,
because you have had or will have
all these other speakers who
have actually solved all these issues,
and so you should
discount everything I say
with the fact that this is somebody
who's currently trying
to figure it all out
and probably at least 50% optimistically
of what I say is mistaken.
But (laughs) at least I can.
- [Professor] No comment.
Pay close attention to
what Patrick says though.
- At least I can give you some bad ideas,
you can kind of benchmark others against,
but the big change, and the
most stricking thing for me
and maybe this partially
comes from my personality,
where I am kind of introverted,
is the need for just formal
explicit communication
broadcast communication.
And it feels sort of, I don't know,
I mean it's unnatural, right?
And nobody wakes up in the morning
and sets out
- [Professor] Speaks in bullet points.
- Yeah, exactly, right?
- [Professor] Three
priorities for this morning.
- Thought I'd give an
update on our Q5 strategy,
and so there's sort of a lot of that
that just you have to
learn to be okay with,
and I think part of the
way to rationalize it
is that a startup itself is
not a natural environment.
So you're absolutely correct
that sort of your natural instincts
are going to, I mean, the optimal things
for you to do are going
to differ from what
feels natural, because a
startup itself is not natural
the social groups that you're part of,
that you participate in,
they don't generally grow
at 50% or 100% per year
and kind of a different set of behaviors
are required to enable that,
and so that's kind of the primary one.
And then
- Let me have this again.
So half the people at Stripe
weren't there 12 months ago.
Half.
- Yeah, no, it blows my mind too.
- So half the people, whatever your last
annual offsite was or whatever it does
didn't hear anything Patrick said
in the dec he wrote a year ago.
- Right and every discussion we had
and debate and tortured sort of
questioning and so forth,
like they weren't there for that,
and we might have spent months on this
and sort of a new person comes and like
"oh, I don't think we
should be doing that,
"we should be doing this," right?
And of course they do have
the very best of intent, and in fact
a large part of that is what's good
about hiring new people
is they sort of help
- [Professor] They reopen some things.
- Exactly, they reopen things,
they have a better sense
for how to do things,
they bring you perspective,
sort of all that stuff, right?
But they also just don't have the context,
and so it's this very dogged
sort of balancing act.
- This is a profound realization
that almost every good CEO goes through,
which is they realize that their job
is to communicate that you're running
on a tighter loop inside your head
than anywhere else, so
you're learning all the time,
all the time, all the
time, and the organization
one layer, two layers,
three layers away from you
can't absorb that change,
and you can't communicate
all of what you're thinking
all the time, and so it's
all about consistency,
alignment, and so almost
everybody I talk to
values alignment the longer it goes.
- Sure, yeah, and also again I think
there's sort of a delicate
sort of superposition of things
- [Professor] Sure.
- required there where on the one end,
yes, you want alignment,
on the other hand, you have to consider
the company as sort of overly rigid
or prescriptive or whatever.
That's going to be problematic.
That's the kind of thing that makes people
want to quit companies,
because their particular perspective
or the thing that they want to do
is divergent from this calcified edifice
that is the company, right?
And so it's sort of how do you have
the right amount of
structure and flexibility
and all those things.
- Yep, my two cents are you're trying
to teach people how to
think in the right ways,
and you're trying to teach people,
you're trying to create a condition
so that they would make roughly
the same decision whether
you're in the room or not.
- Yeah, well.
- That's a little, even
that's a little stringent.
- And caveat with I'm
definitely not the right person
or the optimal person to be making
all kinds of decisions.
In fact I'm the optimal
person to be making
a decreasing fraction of decisions, right?
And so it's not precisely to do
what I would do were I in a room,
but I don't know, some
version of like, well, yeah.
- [Professor] The Stripe.
- Yeah, there is sort of in
the multi-dimensional space
of philosophies and kind of perspectives,
there's kind of a Stripe blob basically.
- [Professor] Right.
- And sort of I maybe am closer
to its center of mass than others
because I've been around longer
and have a bit more influence,
but it is distinct, and it's shifting,
and it ought to shift
and that sort of thing.
- That's not what you expected him to say.
Multi-dimensional philosophical space
where Stripe blobs.
- The Stripe blob, right.
I think it really has a ring to it.
- [Professor] It's gonna go far.
- Well a corolary of that in terms of just
the kind of the explicitness required,
I think the kind of more general version
of it is that just you
should generally shift
from speaking to writing.
- Oh, you think that?
- Yes.
- Why?
- Or rather, it's not that
you should necessarily
speak less, you should
probably still speak, right?
But or at least I think so,
I don't know if anyone else
thinks so, but that you
need to add writing, right?
Because speaking can
kind of only happen once
and generally not to everyone
or it probably becomes super boring
if it's to everyone, right?
It's this giant production.
Whereas writing persists
through time, right?
And can be revisited and
can be updated and so forth
and also has a helpful, at
least in the good cases,
sort of rigidity and clarity to it.
And so one of my favorite
things I realized
or just ones that have
the biggest impact on me
over the last maybe two years
was I think this paper from I think it was
Bruno Latour, and he was talking about
the scientific revolution, right,
and the invention of writing,
and we've all heard that sort of
that writing and the inventing
of the printing press
was sort of critical in enabling it,
basically Gutenburg, scientific
revolution, job done,
and his argument that he
goes that it was actually
more complicated or nuanced than that
where it's not that sort of
writing or the printing press
sort of per se enabled more distribution
which automatically led to more ideas,
because people still
talked a lot previously,
and people had a pretty good sense
for the total space of ideas,
and so simplistically the printing press
could come along,
it doesn't substantially change things,
but the additional property
of the printing press
beyond just kind of dissemination
that it added was concreteness
and kind of rigidity.
And so when you're hearing something
from a friend of a friend of a friend
recounting something
that happened a year ago,
God knows how much it's
shifted and changed.
And because it's not really rigid,
it's this just, again, amorphous blob.
It's hard to disagree with it,
because who knows exactly what they said,
and so it's hard to weed out
and reject the bad ideas,
whereas when it's writing,
you can point to paragraph
three, sentence two,
this is wrong, it does
not match my data, right?
It's actually that aspect
that was so critical.
So anyway, going back to
sort of the writing version,
I think that it's just,
it's much more clear,
and it can be wrong, and it can be updated
in a way that I think is really helpful.
- That is super interesting.
I could talk about that a lot.
I feel like the way you communicate
really shows through in
your product a lot of times.
Like we communicate in Bugs and
Bugzilla and Mozilla, and it created very,
well anyway, a lot of
artifacts get created.
So let's do questions.
You had a question?
- [Voiceover] Sort of related
but you could also make the argument
that interpretation really
just as open to change.
It's not actually permanent.
(inaudible)
- What?
- [Voiceover] The point that writing is
really always open to reinterpretation
so it's the same as (inaudible)
the fact that its (inaudible)
is what makes it so misunderstood.
- So the question is just that writing is,
like Latour, the guy that
Patrick quoted, would've said
that writing is always
rife for reinterpretation,
but I think Patrick's making the point
that it's just simply more rigid
than just spoken.
- Sure, right, right.
- It's on a spectrum, right?
- Yes.
That sounds like it might be.
Next version of the class,
I guess we can read the
Latour, deep, deep dive.
- Couple philosophical blob questions.
Yeah.
- Yeah, you mentioned that
you picked the name Stripe
just by random.
Can you talk about that?
- Yeah, so this is also
an embarrassing story.
It's kind of a helpful
exercise in humility,
because to just remind you of
just how mistaken your past self could be
or wrong.
So anyway /dev/payments,
we thought was a super awesome cool name,
the world didn't quite agree,
and when we went to incorporate
with Delaware, we duly filled out
/dev/payments on the paperwork.
It was rejected because,
we had actually checked,
can you have a slash in
the name, and you can,
but you can't have a leading slash,
and so but of course being
determined entrepreneurs,
we overcame that, and we incorporated it
as S-L-A-S-H D-E-V S-L-A-S-H.
It was really bad.
And then we'd get mail where it was like
S-L-A-S-H slash character D-E-V, S, yeah.
There were many problems with this name.
- (laughs)
- And then you'd have to go
and have a meeting with a bank,
and they're like all right,
and now, the last question,
it's kind of like, "Oh,
what's the company called?"
And basically everything fell to pieces.
(laughter)
So we, you wonder why we
couldn't work with Wells,
but we kind of eventually came to realize
that we needed to change the name,
and we just couldn't come up
with a good name, you know?
I guess many people
have been through this.
And it basically resorted to us,
we have all these books in the office,
and just like opening books
and being like, you know,
actually one of them was a
motorcycle repair manual,
because John was riding motorcycles,
and so we were like "Carburetor, hmm,
"no, probably too hard to spell,"
and so you'd flip another few pages,
and just like, "Wheel,
no that's a bit generic."
(laughter)
And so we literally reduced to picking
random words late at night,
and then one of the folks at Stripe
had the bright of idea of
well why don't we just assemble
like a big list of words and email
all of the owners of the dot com domains,
just kind of see if the words
are actually available
to just kind of reduce
our search space a little bit,
and so we assembled a list
of like 100 words that all seemed like
generally cromulent words
and just emailed all the owners,
and only 10% of them responded,
and of those 10%, most of them wanted
millions of dollars to have a right.
And so we assembled a
partial list that way,
and then we also just kind of continued
our own creative process
which we already established was awesome,
and so we came up with memorable names
like Pay Demon.
(laughter)
And so um.
- [Professor] With an A, undoubtedly.
- We bought both versions, yeah,
we still own both versions actually.
(laughter)
And you can do a who is on paydemon.com?
(laughter)
And so we thought it
was like super clever,
because we could have this awesome mascot,
although maybe BSD confusion issues,
and yeah, well, it was great.
Oh and we also had, we really liked
the idea of building things,
and so the act of creation and so forth,
and so we were kind of
enamored with Pay Forge,
this kind of blacksmith idea,
and then of course a friend pointed out
the other connotations.
(laughter)
Like ah, good point.
And so we were really struggling,
and so we, anyway, the owner of stripe.com
generously responded to us
and had an offer that was at least
within our plausible budgetary range,
but we couldn't decide
between Pay Demon and Stripe.
(laughter)
I swear I'm not making this up.
And this is the part where
kind of the humility comes in,
it's like "Jesus Christ!"
So we decided that if we could not
settle on a name by I think
it was December 20, 2011,
we would just like, was
it, no 2010, December 2010,
we would just default to Stripe.
And we couldn't think of
a more compelling name
by December 20, and so Stripe it became.
And then we sort of, the
second part of the story
is we, I mean we hadn't
launched at this time, right?
But we had sort of a
handful of beta users,
and we kind of, we were
going through the name,
the rename checklist, right?
And so you had to like
buy new SSL certs and
move all the servers,
and rejex gsub over the code base
and all this stuff, right?
Redo the images, like a lot
of stuff to change a name,
and somehow we neglected
one of like tell the users,
and so all these people,
I mean all these people
being like ten of them,
but all these people
went to log in to their
/dev/payment accounts
one morning and were redirected to Stripe,
so we got a few emails like,
"Am I being phished?" or whatever,
but we reassured them, and that was that.
And actually the very last kind of detail
in that story is I was reading
The Little Kingdom by Mike Moore,
it's this kind of history of Apple,
and apparently Apple went through
sort of a similar thing
where they couldn't think of a good name,
and so they set out
sort of a same time-out
we haven't found a better name
by such and such a date, screw it, Apple.
And so we subsequently
learned of some precedent.
- One more question.
Yep so here.
- [Voiceover] Can you
talk about your transition
from a developer, someone who's technical,
someone who's worked on
the product, to a manager?
- Yes.
So it still pains me
a little bit honestly,
in that I really miss coding,
and so I know, I often get this question
of do I miss it or not
and what does that feel like
and just the short
answer is yes, I miss it.
I guess so many things then to say about
the ensuing transition
to both being a leader
and a manager and so forth.
And some level it reduces to I guess
kind of how do you run a company
and a lot of things to be said there.
I think just one thing I'll sort of flag
is that in general, I think sort of
the industry, both kind of overbiases
towards founders, but also towards CEOs
in that I guess we all sort of have this
kind of narrative bias or something
where we want to associate
kind of abstract concepts
like a company with particular people,
and so kind of like I am
the shelling point of Stripe
in being the CEO,
but the degree to which
I am sort of sitting here
representing Stripe, I
am sort of in general
in aggregate sort of
vastly over-represented
relative to everyone else.
And so I guess to kind
of follow that thought,
I think that sort of it's not so much
my transition to management or whatever,
it's kind of a lot of people at Stripe
sort of collectively transitioning
to running an organization
in sort of a pretty large skeleton there.
Actually one of the sort of
the very clarifying realizations for me
was Ali Roghani comment that basically
the CEO's job can be reduced
to just three things or possibly four
and that everything that's not
one of those three or
again it's actually four,
is out of scope, and that
the three that he identified
were the strategy and kind of ideally
if the strategy is right,
that doesn't require
much well-thought time
because you just keep
doing the same thing.
And secondly the culture,
because there's no
other person who can do it.
Or there's no person who can do it to
the same degree, right,
who encompasses the same model authority.
And then the third one being
sort of selecting the senior
management of the company,
because, again, no one else can do that,
and those people will ideally be sort of
the main experts who
know far more than you
and are much more effective
in sort of particular areas,
but you have to hire, select them,
ensure that they're effective,
everything else, right?
And so in his kind of
ontology, like that's it.
That's the job.
- [Professor] That's pretty close.
- It's easy if you get it right.
It's obviously incredibly hard,
I mean how can you fix a broken culture
or how does one sort of in the abstract
come up with a good strategy,
I mean the really hard sort of
when they're not working,
but when they're working,
it can go pretty smoothly.
And then the fourth one which he described
as being optional, is the product, right,
basically the CEO can
be the head of product.
And maybe even that varies
depending on the company,
that the CEO can also be involved
with sort of one specific function, right?
And maybe it's some company's CEO
is also the head of sales.
I think that's probably sort of
a little bit kind of simplistic
and kind of reductionist and so forth,
although maybe I'm just trying
to make myself feel better or something,
but sort of that was one of the most
helpfully clarifying things
that I kind of heard
about that transition.
- Okay, I think we're done for the day.
I mean maybe Patrick can stay
for a couple minutes,
but we should let him go too.
So anyway, thanks for class,
and we'll see you all on Thursday.
- Okay, thanks for having me.
(applause)