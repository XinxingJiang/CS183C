WEBVTTKind: captionsLanguage: en- Okay so this is class number 11.
I think this is themidpoint, very exciting.
So we're talking about scaling fromscaling to village.
And we're very lucky tohave Patrick Collison,who I think you'll allfind super interestingand super thoughtful, sojust let's welcome Patrick.
(applause)- Thank you.
- So thanks for coming.
- Thanks for having me.
- He walked in with a book made of paper,which is always very exciting.
(Patrick laughs)So can you just tell the storyabout starting Stripe,tell the founding story?- Yeah, sure.
So, and by the way,apologies if, you know,suggesting this be off the record,suggest that there'll be all thesesort of salacious details or something.
- Not a problem.
- But mostly just I think it's much betterin these to be able to just sort ofdirectly sort of share everythingand not have this sort of processwhere in the back of your mindtrying to run the filteron what makes sensefor public consumption.
Because a lot of this stuff is sort of,this is not like a companythat started ten years ago,this is kind of happeningkind of week-to-weekand month-to-month.
But the general story of Stripeis, well, I'm always abit sort of skepticalof kind of founding mythologysort of around companiesin that I'm pretty sure theyget sort of heavily editedkind of post-facto.
For Stripe at least, it'sreally not that dramaticin the sense that John, myco-founder and brother and Iwere in school together.
We were both on the East Coast,and we'd started buildingthese iPhone apps together,and we were basically sort ofpaying our college tuition out ofsort of the revenue comingfrom these iPhone apps,and so we'd kind of gotten into the habitof just working on various side projects,and we kind of had realized that sort ofit was surprisingly easy to make moneyout of iPhone apps, right?(Professor laughs)And part of the reason it was so easywas because it was soeasy to charge for things.
And then we were kind of wondering,"Hmm, you know, despite building sort of"all these things forthe past couple years,"why do we never chargefor anything online?"And we realized, well,it's such a pain in the assto sort of acceptpayments on the Internet.
You have to sort of hopthrough all these hoopsand basically get a mortgage.
- Right.
- Or so it felt kindof, in order to sort ofliterally receive dollarsfrom users of your software.
And so I remember using, I'mnot sure if anyone else herehas used this, but there'sa thing called Slicehost,which was kind of thefirst really good sort ofvirtualized hosting provider.
I mean EC2 was maybe around the same time,but EC2 required all this like crazyJava online hackery.
It wasn't as easy to use as it is now.
Slicehost was really straightforward.
You could click like create server,you know, select here the next distro,and sort of 30 seconds later,there's a root password emailed to you.
And it was sort of really transformative,because now getting just your own serverwas just super straightforward,and it meant that I kind of really loweredthe activation energy and a better entryfor sort of going and building something.
And we wondered basically why there wasn'tSlicehost for payments.
And so I actually rememberit was in October 2009,John and I were walkingback from dinner together,and we'd been sort ofbattering around this ideafor a while, Slicehost for payments.
And I remember him commenting to methat, "Eh, you know, weshould just build a prototype,(Professor laughs)"it probably won't be that hard." (laughs)- [Professor] That's a simple questionleading to 20 years' work.
- Right, well so I was gonna,so Avi Bryant who works at Stripecalls Stripe the world'sbiggest ever yak shave.
(Professor laughs)And so maybe in another five yearswe'll get back to building side projects.
- Do you guys know what that?Can you explain what yak shaving is?- Oh, wait, god, kids these days.
(Professor laughs)So, you know, yak shave is sort ofwhen you're sort of building somethingor working on some problem,and you realize that kind of some otherobstruction is going to be inelegantor you should have some other thing,and so you start going, fixing that,and you realize, well,really in order to fix that,this thing has to be thisother way and whatever,and so you kind of get seven layers down,you kind of forget where you even started,because the stack has gotten so deep.
There's actually a greatXKCD comic about yak shaves.
I think he's like surroundedby sharks or something,he started to try to fix his tv.
I don't know, anyway.
If you search XKCD yakshave, it illustratesthe concept effectively.
- It's a bike shedding,but it's a different, slightly different.
- Right.
Right, right.
And I think there's an original parableabout sort of shaving the yak,and you have to buyscissors and whatever else.
But anyway, so we just hadto build the prototype,and we launched kind ofthe first version of thisin January of 2010 to justlike a couple of friends.
It was kind of built withsort of duct tape and wire,sort of really the sortof foundations upon whichit was built were sort of fairly flimsy,but it was enough tokind of just get a sensefor the basic product experience,sort of what it would be like.
You kind of instantlystart charging credit cardsjust with a kind of a crawl command.
Stripe wasn't called Stripe back then.
It was called /dev/paymentsbecause we, you can tell we weregreat binding experts.
But we sort of wonderedwhat it would be liketo have sort of payments API.
It was kind of straightforwardas just the interface to a nodeand sort of the device file system,you know, you devmouseor devaudio or whatever.
And we launched thatprototype in January 2010,and it just sort of tookoff by word of mouth.
It wasn't even launched publicly,but we kind of had thisever-accumulating wait listthrough kind of peopletelling their friendsabout it or whatever.
And like this was kind ofreally surprising to us,because I mean again, it's like an APIfor charging credit cards.
Like it's not a social network,and so the fact that peoplewere talking about itand telling others about itwas kind of quite surprising to us.
And so then that summer we decided to goand work on it for the summeras a sort of bootstrap internship.
And we basically been on leave since then.
- (laughs)I'm sure you'll go back soon.
- That's what my momoften tries to ensure.
- (laughs)Yeah, so you'd gone throughstarting a company before.
you and your brother.
- Right.
- Shoppa. Shuppa? Shoopa?- (laughs) Right.
So Shuppa's the actual.
- Another excellent branding.
- Yeah. Right. (laughs)So we'll actually get thishow we found the name Stripe.
It was actually literally randomly chosen.
But anyway, so we previously startedthis other kind of company together which,it was basically predicated on the notionthat sort there was surprising liquidityin sort of used itemsthat sort of part of what,when you buy something new,kind of part of the servicethat a store providesis kind of to solvethe information problemof like where can I get a thing, right?And so you can kind ofthink of the Internetas a coordinating force in some wayand sort of how can youexpose all this sort oflatent presence of all this stuffin a more effective way.
And it didn't really work as we thought.
So we went back to school.
(laughs)- Well but you kind of teamed up with,that's when you got involvedin YC the first time,is that right?- Yeah, it's a kind of complicated storyand sort of involved mergingwith another company,and then that company got acquired,and so it was actually like a really goodlearning experience.
It was kind of when weraised our first investmentand hired our first people,and sort of just got a sense forkind of how a startup worked.
- I guess I was takingthe long way around,I should've asked directly, which isyou said you created this payments APIand then people juststarted talking about it.
I guess my question wasgoing to be what people,and how did they find out?So I guess what I was implyingthat you built on top of a community- I see, I see.
- was in some part connected to YC.
- So that's very true.
So I'd been involved insort of Lisp programmingfor a real long time,and I presume folks here know about Lisp,and its state of morbidity,so it's a pretty small community.
And through that I got to know Paul Grahamwho of course was working on YCand kind of this othercompany we'd startedhad gone through YC, and so yeah,as a result, when we went andwe built this payments APIfor developers, incrediblystraightforward to get started,we actually, a lot ofour friends were thinkingabout starting companiesor had started companiesor things like that,sort of we had some sensefor that community in general,and that was actually quite powerful,because exactly to your point,there were sort of peopleyou just go and show it toand get some feedbackfrom, and you kind of knewwho was on the cusp ofneed to start chargingfor their software, whowas running out of money,they might need some revenueor whatever the case might be.
And so I think that for thefirst maybe 20 or 30 usersor thereabouts, they werealmost all YC companiesor friends of people whowe knew had gone through YCand things like that.
- Yep, so that's one of my rules of thumbis try to put yourself around peoplewho are doing interesting things.
And then when you find interesting things,they start talking about them,that's a pretty good signal.
- I think that's very true, yeah.
- And so I remember, itmust have been summerof 2010 or 2011 whenpeople would start talkingabout you guys, about/dev/payments around here,and I guess you had comeand done the YC classin 2010 here?Is that what you did?- Yeah, Stripe never actuallyformally went through YC.
YC invested.
- Is that true?I didn't know that.
- But it kind of never wentthrough the program itself.
- Huh, that's interesting.
That's news to me.
So okay, so we're gonna gointo Stripe in a second.
Can you tell us what it'slike to start a companywith your brother?- Yeah.
- I guess you don't know anything else.
- I was gonna say, right.
So the kind of trite answer I often giveis that it's kind of goodbecause we have a chanceto really get good atresolving our differencesfrom a pretty early stage.
We've sort of 20 years of kind of fightingin various ways behind us.
And even though that's kindof facetious in some way,I do think that's the commoncase for like the reallyhighbrow startup is forthe co-founder kind of setto break apart, like itgenerally doesn't persist.
And so you look at most companies, right?And sort of there's someschism or disagreementor whatever that kind ofproves insurmountable.
And I think that sort ofhaving a really strongkind of foundational relationship there,you know, a philialrelationship is I guessone version of that, but even if not that,I think the case is forsort of you know the personfor upwards of a decade,that those in generalseem to fare much better.
And so in that sense, Ithink it's been basicallyreally helpful where wekind of have the kindof relationship where there's kind of nodifficulty in telling the other personthat you're reallyscrewing this up, right?or this is like completely brokenor whatever the case might be,because it's a given thatthose sort of situationsare going to arise.
The question's only how do you,how effectively can you react to them.
- We'll come back to that as wetalk about growing in a little bit.
- Okay.
- How you bring othermanagement into that.
I guess my observation wouldbe a lot of founders split,but the really successfulcompanies, it doesn't happen.
So Larry and Serge, Jerry and Dave,you know Reid and Allen were together,so many, many, many persist.
- That's true, that's true.
And those cases I think, or atleast last I went through it,I went through kind of 20 companies,and it seemed that therewas a fairly strikingkind of inverse correlation betweenduration that they'd knowneach other beforehandand the subsequent outcome.
- Yeah, I think that's right.
And we'll hear from Nirav on Thursdayabout his relationship with Sarah Learythat's a decades-longrelationship as well.
Which actually brings up another point,which is you read a ton of history.
So Patrick's a very, there are fewinteresting people I follow on Twitter,and Patrick's one of them,and he'll be embarrassed that I said that,but the most recent thing he tweeted outis history about York's park,which everybody should look at the historyYork's Park, because holy smokes,a lot of stuff came out of that place,but why do you, you spend more timereading history of everything, really,than almost anybody I follow on Twitter.
Why do you do that?- It's just, it's a way to cheat.
Everyone else ignores allthe good ideas from history,and so you can just be much smarterby just, you know, youcould just try to thinkall these incredibly original thoughtsby sort of sitting downand staring at the wallfor days on end, or you can sort of cheatby just, you know, I mean theyare, in fact, written downin books that you can just read.
And again, I can mean thata little bit facetiously,but I think that Allen Kay has this quoteabout computer science, where he calls itsort of pop culture, butby sort of switching meansthat sort of for most kind of communitiesor sort of again, subculturesor whatever the case might be,sort of there's a progression, right?Things build upon what came before,whereas in computer scienceand so much of technology,it sort of is just like brownie in motionthrough the problem space,and sort of with noaccount given to kind ofwhat's come previously.
And I think that sort of weas an industry do ourselvesan enormous disservice by being so blindand kind of blithely ignorant to it,and right from sort of Engelbart doingsort of the first demo,I mean we've all kind ofheard of Engelbart as inventing the mousewhereas sort of inactuality what he inventedwas so much more than that.
He basically invented ether pador like the first kind of realtimecollaborative word processor.
He had like video conferencing integratedwith the word processor.
You could annotate andhyperlink documents togetherin realtime, like hebasically had a better systemthan Hangouts, as far as I'm concerned,that he demoed in Iguess it was '68 or '67.
- [Professor] '67.
- '67, yeah.
And then if you look atsort of what came outof Park or I mean so muchof this kind of early workthat I think franklyit's better than so muchof what we ended up with now.
That's not to say there hasn'tbeen sort of a lot of valuein kind of what's ensued.
I mean, we've solved all kinds of sort ofdeployment problems andtechnological problemsand scaling problems and so forth,but in terms of sort of the core ideasbehind so much of it, I think that sort ofin some ways, there wasmuch better thinkingamong some of the kind of, the creators.
And kind of in a substantialway, I think thatlike the kind of, the line of thinkingaround sort of the early conceptionof so much of this kindof software technologywas about kind of empowerment of humansand the kind of phrasesthat were battered aroundwere things like"intelligence augmentation"and "intelligence amplification,""augmenting humanintellect," things like that.
So this is kind of the originalbicycle-for-the-mind idea,which I think is sort ofincredibly potent, right?Kind of how can we leverage this softwareto make us more effective at sort ofwhatever it is we might be doing?And then I think that sort of so much ofkind of what's happened with the Internetor kind of the modern technology industryas we know it is eithersort of a very kind ofbasic sort of functionalityaround sort of utilities, right?So it's not about sort ofhigh-level intellectual functionsas about just, I mean notthat it's not valuable,but like how do I get a car come to here?I'm really delightedthat that service exists,but it's not sort of part ofthat original line of thinking.
Or it's about basically entertainment.
It's about sort of the Internetas sort of a more interactiveversion of television,which also has somemerit, I mean it's not,entertainment has merit,but I think there's beena significant loss of that,and I think that people,I mean this is kind ofa longer conversation,but basically to answer your question,I think this is kind ofa systematic undervaluingof tools and sort of undervaluingand lack of appreciationfor the kind of impactthat that can have, because it's harderto perceive and when youdo something directly,you can see what it is,whereas when you're enablingsomething, you have to kindof make that additional leapand the way we often phrase it for Stripeis that most technologycompanies are building cars,whereas Stripe is building roads,that kind of distinction.
- I promise I'm going to get to scaling.
I just want to spend alittle more time on this.
A lot of things reallyspoke to me on that,so me and Doug Engelbart,so Doug came in, did youmeet him before he died?- Sadly no.
We had Alan Kay stop by andspeak at Stripe recently,but I never met Doug.
- So AlanI want to talkabout a second too,so Doug came to visit at Apple,so Doug was at Juris Park,and I remember he came in,and we showed him demoes in probably 1999.
He's like, "Finally, somebody did this"that I said 30 years ago."And that happened likefive times during our demo.
Like, "Okay, fine."But I think a lot of what happenedwas it was a quietertime, it was less noisy,and so more people were thinking harder.
And so I think thatresulted in better qualityof thought overall aboutwhat was happening,and it's just shockingto me that so many thingshappened in the '60s and '70s and '80sthat are echoing now.
And even Alan Kay, like his other quotewas that point of viewis worth 80 IQ points,which, what a brilliant quote.
It's like try to figureout the right problem.
And if you look at it from the rightpoint of view, you win, right?- Yeah, and I think it's really easyto have this kind ofin a historical sense,this rose-tinted view of history,and I think there is kind of occasionallykind of fascio way in which people sayx or y has been done previously,and there's nothinginteresting being done todayand so forth, and Ithink that that sort ofthat misses the fact that so muchof sort of the details really matterin software, right?And that you can besort of 90% correct but- [Professor] Completely wrong.
- That's like being merely90% alive, right? (laughs)And that sort of you don't get a whole lotof partial credit, butyeah, I wasn't around,but I'm very curious why it wasthat why this perspective did differ.
And I suspect part of itwas that it was quieter,I don't know, maybe there was lessFacebook and Twitter and Tech Crunchand all the rest, yeah, which maybespeaks to my own way discredit,but I think also part of itis just kind of the ambition,honestly, in the sense that, like,there's a great book thatI recommend you all readcalled the Dream Machineby Mitchell Waldrop,which I think is certainlyat least the best historythat I know of aboutsort of the early daysof sort of technologyand the internationalkind of the computer revolution.
And one thing that it sort of makes clearis how it kind of, it wasn't at least,kind of the book'sargument and thesis goes,it wasn't inevitable thatsort of so many of thesethings happened or so manyof these kind of ideaswere perculating, it wassort of particular peoplewho had particular ambitions,folks like Licklidersort of originally of MITwho kind of funded a lot of the workthat sort of led to the Internet,and sort of I guess hisintellectual descendentslike Engelbart and Kay and so forth.
And I guess the optimistic view would bethat sort of a lot of that ambition aboutsort of the power thatsoftware can have on societysort of can, in fact, be reclaimedor at least that we're not sort ofgonna necessarily fall victimto the noise that surrounds us today.
- [Professor] The Twitters, yeah.
That's why I'm spending alittle bit extra time on this.
- I'm actually, I should just say likeI think Twitter is a tremendoussort of force.
- Oh, me too.
I kind of live on it,so it's like I make fun of it,and I'm a little bitself-conscious about it.
But then the other thing I was gonna sayis that my models of computingare Alan Kay's the Dynabookwhich was essentially describesApple and client computingand Xerox PARC, Ubicomp,which essentially describesterminals and Google.
And these are stillthe two dominant modelsof computing today, 50 years later.
And so when I look at client or server,it's essentially Xerox and Xerox.
- Yep.
- Actually that's kind of it.
Okay.
So I was gonna ask youwhat a philobiblist isbut I'm gonna wait till the end,because I'm excited about that.
He had a word in hiseight-word Twitter biothat I had to look up, but I like it now.
So let's talk about Stripe.
So how big is Stripe now today?I think it's around 330 people.
- 330, and it's.
- As one metric at least.
- [Professor] And it's five years old?- Yeah, it's actually getting a bit hard,because do you count frombasically that dinnerwhen sort of John misled meor from when we firstlaunched it or whatever.
But generally what I sort of count fromis when we launched publicly,because we had fewer than100 users at that point,and we launched publicly to the worldSeptember 30, 2011,and so we just celebrated ourfourth birthday post-launch,and so we we're kind ofeffectively on the orderof five years from when wereally worked on it full time,and then four years since public launch.
- Okay, so you're 330 people now.
A year ago, were you half that size?- Yeah.
Probably this time a yearago, maybe 160, 70 people.
- Yeah, so about doubling every year now.
Yeah what was it that Derek Schmidt said?Doubling every year is possible,quadrupling every year is really hard?- Certainly we could notquadruple every year.
- Yep.
So talk about how you're organized.
- This might turn into an evening class,but well on what dimension?Just in general how the company works or?- Well, yeah, how you run.
Like do you have vice presidents?- That's easy.
- Do you have managers?Does everybody do whatever they wantlike a holacracy?What happens at Stripe?- Yeah.
So the like the howwe're run bit I supposeis that we're wildlyconventionally organized.
And that there's always such a temptationsort of when you're starting outto go and sort of reconceivethe nature of humanityand how people cancollaborate and coordinateand so forth, and thatbasically you should reallykind of try to discouragethat inner voice,and I think it sort ofcomes from a good placewhere you want to kind of reconceiveall of these things, right?But there's two problems with that.
The first is that you kind of think aboutwhat risks you're taking in the businessand sort of empirically thestandard means of organizationare sufficiently effectiveto create the Googlesand the Facebooks and the Intelsand so forth of the world,and so I mean even if,just posit that sort ofyou're actually capable ofconceiving a more effective wayof having tens, hundreds,thousands people working together,whether you actually need thatto achieve your actual goals,and the second one is thatprobably all of the problemswith any alternativethat you could conceiveare things that you haven't been exposedto today, you just don'thave the life experienceto sort of anticipate.
And so basically whatever you thinkyou should probably do instead,you're almost certainly wrong.
- So let's stay on that for a second.
- Okay.
- That's an unusual thingfor a Silicon Valley person to say.
- Don't innovate, yeah.
- Maybe old people knowwhat they're doing,because they've done it beforeor they've lived through it.
Can you break that apart a little bit?- Yeah.
- As an old person, I'm excited aboutthis line of questioning.
- (laughs)I think that, well, technologychanges a lot, right?And so I think the rightanswer is a functionof the current technologicalequilibrium, right?And so if an old person thinksthat such-and-such is a badidea or something like that,I mean there's anexcellent chance that nowsome period of time later,they're wrong, right?Because a dependentvariable has changed, right?But people aren't changing a whole lot.
And so instead of whateverthe optimal system waskind of some period of time previouslyis I think your default prior should bestill probably a pretty good idea.
I caveat that withI think if you look at thehistory of Silicon Valley,things are in fact changing,even though people themselvesaren't changing that much,because I guess just the environment,people's expectations andso forth are changing,and secondly I think that adiscount factor on how wellwe do things is thatpeople do copy too muchkind of this memetic force at play.
My favorite example ofthis is kind of standardSilicon Valley interviews.
I can't remember his name, Google's HR.
- [Professor] Laszlo Bock.
- Laszlo Bock, right,wrote this great articlefor the New York Timeswhere, as I recall, he sort of admittedthey'd observed almost no correlationbetween GPA and indeed Googlesort of interviews themselves and sort ofthe subsequent performanceat Google, right?And that certainly was the case for GPA,I can't remember if it'sthe case for the interviews,but and sort of likeessentially every companydoes the same sort ofalgorithm-style interviewsand coding on a white board and so forthand essentially everyone, atleast everyone I've talked tokind of knows that itdoesn't really work, right?- [Professor] Yes, it doesn't work.
- And yet nothing changes.
And it just seems so insane, right?And as far as I can tell,you want to be successful,you look at what thesuccessful company does,they do algorithms andinterviews on the white boardand so forth, and so despitethe fact that most technologycompanies are not about writingalgorithms on white boards,that you sort of want totranslate and bring acrosswhat it is that they do,it's just surprisinglyrobust and resilient,and so we don't do that, wejust try to think about, well,what it is that people atStripe are actually doingday-to-day, I mean they'rewriting code on laptops,and so our interviews are largely,we've wrote a Quora answer about this,but it's largely writingcode on your laptopin the environment you're familiar withand experienced with and so forth.
And it works really well,and then when people join,they're generally pretty goodat writing good code on laptops,and there's this, again, discount factorwhere I think people just,there's too much inertiain the existing ideas.
But having said that, interms of just the organizationof a large group of people,default is to trust the mechanism.
- Yeah actually it's a lot of technologywhich is core processes that run a lot,it's really worth figuringout first principles,and for you that's recruiting.
- Yep.
- But invention is really hard,because it means kind of dealingwith unintended consequences.
There's a lot of things that happenwhen you do things differentlythan anybody's done it.
- Right.
- There's no maps, there's no guidance.
- I think there's also kind of a questionfor the cost benefit, right?In the sense that likeif you can be sort ofsomewhat better evenepsilon better on recruitingsort of maybe thatactually matters, right?Whereas for a significant fractionof the things that haveto happen in a company,you can fail if you screw them up,but they're not going to be the thingsthat sort of create outsidesuccess by themselves,and for those again it's just probably,even if you posit that you're right,that you can do them betterthan all of your kind ofmistaken predecessors,is it really worthspending your time there?Because fundamentally,that's the most constrained resource.
- Right, yep, okay.
So you talked aboutyour laptop interviews.
You guys have a reputationthat you well-deservefor being excellent at hiringvery, very, very good developers.
How long did it take before you starteddoing laptop interviews?And has it changed nowthat you're 300 people?- Yeah, so I think, well,it's always so hard to knowfor anything was good or bad at Stripe.
One, it's hard to knowwhether it is actuallygood or bad or whetherthat's just perception.
I mean in the case ofhiring I actually thinkwe lucked out.
You're never sort of entirely sure.
But then secondly, how much was kind of,you can never kind of piece apartthe attribution of all thedifferent factors, right?And so for example one thingI think we benefitted fromwas the fact that Stripebuilds software and toolsfor developers, for engineers,and so I think there'skind of more of an affinitythan, I mean, for some randomlyselected other product,how much did that factormatter, I don't know, right?Potentially, all of itcan be attributed to that.
And in fact the different waysin which we did interviewsis completely inconsequential,I don't quite think that's true.
I think probably the biggest thing,aside from how we interview folks,that we did differently is just being okaytaking a really long time to hire peoplein that, kind of the received wisdom iswork really hard to hire the best people,and you're like, "Gee, thanks, I was going"to do the opposite, butnow that you've said that,"I'll work really hardto hire the best people."And so I guess the question is sort ofto what lengths should you goand kind of what does thatactually mean in practice.
And in practice it means being okaywaiting a really long time to hire peopleand having to be painfullypersistent in doing so.
And so it took us, let me think,took us a year, well it took me six monthsto hire the first two people, so.
- That's the same storythat Sam Altman told aboutabout Airbnb I think,took maybe nine months.
- So a person per quartereven though we hadthis kind of network alreadyand knew all these people,we managed like one every three months.
And then in I think thesix months after that,we maybe hired anotherthree or four peoplekind of on that order.
We had week-long trials with them,we had some of them kind of network out,in many cases, they sortof thought they didn'twant to join, and so it was kind of likethis three-month lifeconversation about it,- [Professor] (laughs)- I mean therapy session of sort ofwhat the best thing for thesepeople to be doing would be.
And this is I think what you findwhen you're trying tohire the best people,because you can kind of go either sort ofyou can filter first by kindof, by expressed interestor something, and then you can sort ofsecondarily filter for okay,and which ones are good,or you can first look for the good ones,and then try to sort of convertthem to expressed interest.
And I think that the latteris the more effective wayto go about it, but then that meansyou have to sort of turnthis aircraft carrier,where I mean if you justthink kind of ex-ante about- The aircraft carrier's the candidateyou want to go get.
- Exactly, right, yes.
Bit of a tortured metaphor,but you just think about thesmartest people you know,and you want to get themto work in your thing,I mean chances are, asfar as people you know,- Are working already.
- Yeah, they have pretty good pathsahead of them, right?- Yep.
- And to sort of consistentlytry to rotate thesejust takes a real long time.
And so there are multiplepeople at Stripe now todaywho took us several years to hire,like, I can think off the top of my headof five people who tookthree plus years to hire.
- Yep.
- And the idea is sort ofthat when you're so earlyin the company's historythat you should bekind of investing in people for whomit might take that length of time to hire.
- [Professor] It seemsa little crazy, yeah.
- It seems kind of crazy, right?So I think maybe apart from sort ofinterviewing people sensibly,I think the big thing thatpeople have to keep in mindin sort of early stage company recruitingis just you have to be way more persistentand be okay with it taking way longerthan any sane or reasonable personcould think it should take.
- Yep and that's what DrewHouston says about Aditya,he says they tried toget Aditya and Ruchi,Aditya runs engineering, for over a year.
They had to acquire hiscompany to get him to do it.
- Yep.
- You know, I was reminded, I'minvolved in a search companyin Palo Alto, and it'sabout two years old,but the painful, the vicious cycleis that you're going soslowly when it's the firsttwo or three people, and you're like,"Holy smokes, if we could justget another set of hands,"but you don't want to do it,but we talk a lot in thisclass about compound interestand the value of compounding interest,like if you get just one great person,that makes it marginally easierto get the next great person.
- So I think it's that dynamic in spades,and then secondly Ithink, kind of another wayto think about it, maybemakes the importance of itand potency kind of clearer,is that you have to imagine the light coneor kind of the tree of all of the peoplethat this person will hire,and so rather than just thinking about itas kind of do I want this person or not,it's like, "Do I want this person"and the 50 people whoI think they will hire?"Because even if they don'tliterally hire 50 people,they will be kind of so influentialin determining the self-selectionof those 50 people,and so you're reallypicking this giant branchof a potential future organization.
- Yep, and then there's something whereyou get to a critical mass and ultimatelyyou get a new chunk where they all believethat it might not be crazyto go work for this startup.
- Yes.
In our case, it took a long time.
- A couple years' struggle.
- Right.
And that kind of alsogets into sort of networksand so forth where sometimes you,these things can kindof compound more rapidlybecause they're not completelyindependent variables.
- Right.
So it sounds like you had the sensethat you had product marketfit at the very beginning.
- Right.
- You did this thing, andpeople started talking about it.
Is that true?- Yes and no.
So yes in the sense thatfrom the very beginning,sort of shockingly, thisidea of, I mean, again,it really doesn't sound promising I thinkcertainly a lot of people we talked todidn't think so, sort of a credit card APIthat was really simple to use over cURLand you could set up instantly,you're not immediately like,"All right, let me invest."- Yeah.
- And indeed, most people weren't.
But that in fact turned outto be a pretty good ideaand it ended up playing intoall these kind of largersecular trends and like the rise of mobileand the shift fromadvertising-based business modelsto transaction-based business modelsand things like that.
- You know that wasn't that muchwas really associated with mobile.
- No, but I think it was just kind ofthere was actually, itwas kind of a periodof high turnover in the industry,and so kind of more things were gettingrebuilt from scratch and so forth, right?- Yep.
- And then, and also product disappearancewas becoming more important.
- Sure.
- And so just bouncingpeople to some other websiteto pay was just not viable.
- Yep.
- And so there was kind of that.
But then I think kind of the second aspectwhich kind of, in whichthe product market fitwasn't quite there from the outsetis in sort of the additionalstuff that happenskind of on top, in that for example,one of the most successfulthings we've launchedis the thing called Connect,which basically enables people to sort ofto pay other people with Stripe,is kind of the verbacialway to describe it.
And so you think about allthese new marketplaces, right?And so Instacart andPostmates and Doordashand Ship and so forth, right?Are you an investor in Ship?- No.
- Okay, sorry.
Somebody thought you were.
- But I use them all.
- Okay, yeah, great.
Lift, Uber, Airbnb and so forth, right?And so tons of these companies,in fact I think the vast majorityare built on Stripe, right?But that requires thisadditional set of APIsthat we call Connect in order to do soand to sort of coordinateall these paymentsand keep track of themand sort of help themhandle the tax issuesand the whole ensembleof factors.
And so there are a lot of additional APIswe ended up building on top of this reallybasic transaction processing part.
But I think people don't quite,or it's difficult to understand, right?Because it's kind of like AWSin that people kind of know, well,they do kind of the EC2thing and the S3 thingand there's a bunch of other thingsand kind of actually in the detailsbuilding infrastructure.
It's pretty hard to keeptrack of all the other things,and I think Stripe has a similar dynamicwhere that initialcomponent was a very goodproduct market fit tobut in order to actually get here,a huge amount of additional workthat had to happen andinvention that had to happenthat's just basically hard to understandwithout a lot of context.
I think that's somethingthat for better or worse,Stripe has faced for its history,where people kind, wellbecause it's kind of hardto assess from the outside unless you knowa lot about the domain,kind of the bad part of thatis people just kind of don't getwhat Stripe does or why it mattersor in what way itmanifests the consequence,and the good part is competitors alsodon't really get it, right?And so Stripe got to this pointsort of pretty easily, andso it kind of cuts both ways.
- That brings up a lotof different questions.
So one of the things I heard in thereis that there are successiveproduct market fits.
- Yep.
- Like your different signs,they don't all come together,sometimes are spread out,sometimes you have to getproduct market fit in one place- Yep.
- to let you build torealize you don't have itin another place.
- Right, yes.
- Does that sound right?- I think that's exactly right.
- And then so fast-forward to 2015.
What scale are you at today?Like how do you talk about scalewhen you're talking to the public?- We've, well this getsto sort of another issueof sort of to what degreeyou should be forthcomingabout your business metrics.
- Right.
- And we've always been in the schoolof not being.
- Yeah, okay.
- And so I think thecurrent public things we sayare we handle billions of dollars a yearfor, we actually recently started sayinghundreds of thousands of businesses.
- Okay.
- And that's kind of about it.
But I mean it's become the default thingthat technology companies usewhen they want to move moneyaround on the Internet.
- Well that's a somewhat broader thingthan saying you have hundreds of thousandsand billions, so saying you're the defaultis a good thing to say, it'sthe thing you want to say.
Sorry, I'm trying toback out to a differentset of questions.
So talked about scale.
Let's talk about, oh,you talked about Connect.
I was reading one interviewwhere basically somebody said,"Well, look, don't we have PayPal?"It was in PayPal fine.
- Right.
- You said, "Well, PayPal'snot really what we do.
"PayPal's for person-to-person transfer,"party-to-party transfer."That's kind of what you describewhen you were talkingabout to Connect to me.
- Yeah, right, and this is a great examplewhere kind of at a highlevel you're like oh.
- But BNC doesn't understandat all what you're doing,so we'll ask you toexplain in small words.
- I'm not sure which interview this was,but where it really gets down to details.
And so kind of the critical difference isare you building softwarethat sort of coordinates these,this kind of network ofmoney flowing, right?I mean like what Lift needsor what Instacart needsis very different to the experience of"Oh, I'm gonna pay my friend."- Right.
- With Lift, it's I meanyou're gonna mechanicallysort of coordinating this paymentbetween the rider and the driverand that like Lift ismediating that payment,and then sort of all theseadditional considerationsaround it for like "What happensif it has to get refunded?"Or like "Actually theamount can be different,"because you can give a tip to the driver,"and maybe it'll get charged back later,"and it has to work indifferent countries,"and so in practice,completely kind of differentproblems face us.
I mean I guess the problem we faceof person-to-person paymentsis how do I do reallyfrictionless onboardingand honestly how do I have peoplenot forget about it,because people don't actually practicepaying their friends allthat often but whatever.
- [Professor] (laughs)- There's like superdifferent problem spaces,but on a high level, you're right,both involve money goingfrom one person to another,and so that really being kind of,basically without kindof talking to the peoplebuilding the app sortof hearing their issuesdirectly firsthand, they do kind of soundsuperficially similar.
- And so I guess then you would sayyour product suite now is a reallystraightforward authentic expressionof your original thing,which was people make apps,and they'd like to get paid for them,paid by their customers and sometimespay their suppliers out, is that?- Yeah, no, I thinkthat's basically right.
So the way we kind ofcame to think about itwas kind of two dimensionsor maybe three to it.
So the reason we decidedto drop out of schoolor maybe go and leave.
- (laughs)- was because we realizedthat just in generalthe market as a whole was actually tiny,and so you kind of hear transactionson the Internet, you know,that's kind of been doneor something, right?But you need to just look at itfrom a high-level standpoint,and you sort of look at the total figures,and about, certainlyat the time, 2% of allconsumer spending was happeningthrough the Internet, right?And so kind of as a total industrycommerce on the Internet,was kind of 2% of the starting blockso whatever happened to datewas incredibly early interms of the ultimate curveof what's coming.
The second one was just kind ofmore directly looking atsort of the global aspectwhere the smart phone is kind of howthe Internet is reachingthe rest of the worldand again we were really earlyin that process happening,and so there were allthese incredibly promisingniche end markets andChina, India, Indonesia,Brazil, et cetera, right?And then the third one kindof to your Connect pointwas that businesses were building theseincreasingly just complicatedtransaction-oriented services,and I mean Connect is a good example,but Crowd Funding is another, right?They were sort of KickStarter does not monetizeor facilitate advertising.
They facilitate just this completely newkind of transaction, right?And so realizing this was increasinglyat the core, not justpartially, but at the coreof what the next generationof companies were doing,like if you think about it, Airbnb, Uber,Kick Starter, Instacart, Lift,- [Professor] Everybody interesting.
- Yeah, they're kind of these new kind ofreal world economic relationshipswhere it's an integral part,and so the belief was that,well, there's gonna bea lot of those and sort of the use casersare going to get richerand more complex over time,and there needs to bea completely integratedset of tools and APIs tofacilitate the whole thing.
- Okay so I'm gonna aska bunch of questionsabout engineering and staffand product definitionand organization, but you guys get boredif you don't ask questions.
Do people have questions at this point?Or should we keep going?- [Voiceover] How didyou go about setting upthe sort of back-end relationshipswith the credit cardprocessors and all thatwhen you were really small?- Right.
Good question.
This was one of the hardest parts.
In the beginning, we sort of worked with,this part might be partly off the record,but in the beginning we worked with,there was a guy I met at a party,and his friend ran a payments company.
It was like a tiny little operation basedout of the Midwest,and they agreed to letus build a prototypeon top of their thing and just didn't asktoo many questions.
And so when you instantlycreate your Stripe account,John and I got an email,and we'd go and likefill out the paperwork andsubmit it to this company,and instantly set up your Stripe account.
- [Professor] For real?You put manually?- Manually.
- [Professor] Wow.
How many did you do it like that?- Dozens.
- [Professor] (laughs)- And actually that worked really well,because the salient point wasthey didn't have to do it,the user didn't have to do it,and we were fine doing it for them,and actually, it's a separateline of conversation,but there were a lot of thingswhere we just sort ofmanually did it ourselvesfor a very long time.
And then we went andwe met with Wells Fargoand sort of described whatwe were doing to them,and we'd gotten instructionthrough somebody and so forthand they unequivocally said that they hadno interest in working with us,and so it was like hmm.
And then, it was gettingincreasingly frustrating,because it was growing,and we were having to fill outmore and more of these forms, right?But we sort of had noroute to something better.
And so we asked one of our early investorsfor advice on this.
It was a guy called Geoff Ralston.
So Geoff had been a CEO of Lala,which was kind of like anearly version of Spotify,and they were one ofthe first kind of legit,legal music services,and they'd gotten deals donewith all the record lables,and so we kind of thought who do we knowto get a deal done with a bank?Well Geoff got a deal donewith the record labels,- [Professor] (laughs)- I mean, you can dealwith the record labels,you can deal with anyone.
And so we went to Geoffand we basically said, you know, "help."And he's like, "Oh, Ididn't actually do all these"deals with the record labels."It was actually one of Lala'sco-founders, Billy Alvarado.
And so he pointed us to Billy,and so John and I met with Billy,and he had actually,Apple had bought Lala,and Billy had just left,and I think, I don't know,maybe Billy was bored, and so he's like,"All right, I'll help youkids out a little bit."And so he actually ended up joining Stripeas maybe the fifth or sixth person.
And we were like, he wasn't anengineer, and so at the time,- [Professor] You had a BD guyas your fifth or sixth person.
- Yeah, yeah, and so, andwe were really torn over it,because it was like.
- [Professor] That's supersurprising for a companythat's so engineering.
- No, no, no, and we were like,"He doesn't write code, I mean,"should we hire a personwho doesn't write code?"- [Professor] What does he do?(laughs)- What does one even dothat's not writing code?And so we were sort of sharing thiskind of inner anguish with Geoff,and Geoff, to his credit,was commendably patient,and was like, "Patrick,one, stop being an idiot."I don't think he said idiot,he said something stronger,but for the sake of the record,I'll say he called me an idiot.
And he's like, "Youshould just hire Billy."And I remember he promised methat if it didn't work out,he would go back and retroactivelypay Billy's salary, so he was like,"So there's no downside for you."And at the time, we didn't havea whole lot of money, and so that's.
- [Professor] So that mattered.
- Yeah, absolutely.
And so then we hired Billy,and Billy is still at Stripeand is one of the mostimportant people at the company.
- [Professor] How did you?- No actually, just a second,and to finish the story,so then basically Billywent and solved Wells.
And so it, I mean,there's a whole separateline of conversation to be had abouthow to do business development effectivelyand we were really badat it in the beginning.
I think it's actually avery interesting question,how should a startuppartner with other entities,and obviously that's apretty important partof what Stripe has to do.
And Billy sort of taughtus a hell of a lot,but about two months after Billy joined,we had the requisiterelationship with Wells Fargo.
- Wow.
I was gonna ask, how do you evenevaluate how he's doing?Because he's such a different backgroundsituation than you.
- Right.
- I guess he just did magic thingslike bring Wells Fargo in so he's probablygood enough, yeah?- Yeah, we're kind of at the point wherethere were fairly discreet thingsthat had to happen or not.
And so in that sense, itwas fairly assessable,but there were also abunch of other thingswhere (laughs) he knew, Imean he'd basically beenthrough a real startup before in Lalaand so for example, I remember him askingpretty early on how we do payroll,and we're like occasionally we multiplythe agreed salary by length of timesince people were last paidand give them that money.
- [Professor] (laughs)- And he's like, "What about deductions"and tax and all these things?"And we're like, umm.
- [Professor] Really?- Yeah.
- [Professor] Wow.
Awesome.
- (laughs)And so there's all sorts of cleanupthat Billy helped us through.
- [Professor] It's good tohave people who clean up.
- (laughs)- Okay so I think I know this question.
So I think you guys had such a clearproduct value proposition, I was gonna askabout how you decidedwhat things new to do.
- Right.
- So I think I have a guessnow, listening to you talk,but can you talk about it for a second?- Yeah.
So I think this is a pretty hard questionwhen you're building a consumer productbecause consumers don't reallyknow what they want, right?I mean in that this is sortof the challenge for Facebookwhere it's, you're dealing with all thesemercurial teenagers,and the greatest mindsof our generation are staring intentlyat all this data trying to figure outwhat do the millennials want,but that's very difficult.
To be clear, to their credit, they've donea fantastic job of keeping abreast of itwith all the acquisitions and so forth.
But it's hard.
You can't just figureit out through analysis.
- [Professor] Right.
- Or these people haven'tfigured out how to yet.
Whereas when you'rebuilding for developers,you can just cheat again,you can just ask them, right?And in fact even if you don't ask them,- [Professor] They'llprobably tell you anyway.
- they're frequently relatively vocalin their preferences and desires.
And so I mean,- But that's a little glib right there.
- I was gonna say, right?Because you prioritizeand which ones, right.
And so we pay a lot of attentionto who we judge to be theones with good judgment.
And you also have to fit the whole thinginto a long-term perspectiveof how these piecesfit together, and how theproduct ought to evolveand so forth.
One of the, I rememberMark Zuckerberg commentingat one point, I think thisis kind of good advice,that this is, in general,I think kind of the valueover-mythologizes kind ofthe role of the founderand the criticality ofthat person and so forth,but he commented that it's very importantfor the CEO to be sortof integratively involvedin a lot of the micro product decisions,because what's optimal to doon a one-year time horizon is oftenquite divergent from what's optimal to doin a five-year time horizon,and it's just difficult for anyoneother than the CEO andespecially the CEO founderto have this long time horizonkind of in their optimization function.
- [Professor] Yep.
- And so I think there's afairly important aspect there.
But yeah, for us it's Iwould say 70% listeningto the people who we think areeither have really good judgmentor are themselves likelyto become really big,because kind of just in and of itself.
- [Professor] Ip facto.
- Exactly.
And then maybe the other 30%sort of doing things wethink ought to be bigbut for some reason we'renot being asked for.
And a good example of this is webuilt this integration with Alipay.
Alipay is kind of likethe PayPal of China.
So many of these things inChina have this kind of.
- [Professor] They're pretty big.
- Exactly, kind of eye-watering scale.
- [Professor] Growing pretty fast.
It's gonna be bigger tomorrow.
- And we'd have all these conversationswith businesses where we're likeand we have this Alipay integrationso sort of everyone inChina can now buy from you,and the businesses would say,"Well, I don't know ifthat's relevant to us.
"We don't actually sellthat much in China."And we're like, "Let's just think through"the logic of that statement."- Yeah.
- And why it might be that people in Chinaaren't buying from you.
And then they'd often belike, "Ahh, good point."And add Alipay and sothings could go well.
But 70% I would say being ledby the smart companies and developers.
- Right.
And then how do you,well two different questions.
So how's Bitcoin relatedto something like that?So Bitcoin looks like developersget very excited about it.
Do you guys get excited about it?How do you think about big clientele?All developers say, "Ohmy gosh, let's do this."- Right.
- Doesn't feel like athing that's huge yet.
- Yep.
Definitely not huge yet.
I think that you have to be somewhat okaywith making, I guess multiple people havekind of made the statementthat you can't judgedecisions by their outcomes,and at first blush, that soundslike a strange statement,but I think kind of whatit gets at is this ideathat you have to judgedecisions by their EVrather than by the particular outcomethat in fact resulted.
- [Professor] Right.
EV, expected value.
- Sorry, yeah.
And so even, I mean certainly at the timeand even now, it's not completely clearsort of what happens to Bitcoin,but I think that even if the probabilityis relatively low, sort ofthe potential significanceof some success outcome is large enoughthat it's probably worthkeeping abreast of it.
And also I guess we feltsome just general affinityto that community.
I mean I don't personally nor I guessdoes Stripe subscribe to thesesort of crypto anarchistssort of let's liberateourself from the tyrannyof our monetary oppressorskind of school of Bitcoin.
- [Professor] (laughs)It's bigger than it sounds like.
It's bigger than you think.
- (laughs) I just realized recentlythat probably that theoriginal PayPal clientfirm Satoshi, it'sprobably the first paperthat sort of you know both the paperand political science and then CS.
- [Professor] It's a beautiful,everyone should read at least,it's seven pages long, it's beautiful.
- Right, right.
- [Professor] And likeslightly insane but beautiful.
- Yeah, yeah.
- [Professor] Insane in a good way mostly.
- Yeah I mean whatever the first blockhas the New York Timesfrom the financial crisis and so forth.
Anyway, it's definitelya strong political agendabut I think the kind of thedistributed systems aspectand honestly the idea of sort ofa decentralized infrastructurethat sort of can bea system and a ledger and so forthvery sort of so much of the substraight,I mean, that's kind of a cool idea, right?- [Professor] It's beautiful, yep.
- So we wanted to do abit to help move it along.
- [Professor] Okay, so whoruns product at Stripe?- So, well we have a bunch of differentproduct engineering teams,and some of those teamshave product managerson them, not all of them do.
They are, without actuallycounting maybe five or sixof those teams, and not all of themare kind of formallybroken up and so forth.
And then there is asingle engineering managerwho manages all of themanagers on those teams,and then I manage.
- [Professor] The product managersreporting to an engineering manager.
- So the product managers reportto the single manager foreach of the product teams,and that person managesthe product manager.
- Cross-functional management.
It's a management management engineersand product.
- Okay so the problem is thatI guess there's product managersand this is like productin the engineeringsense of the product, butjust the simplification,oversimplification is thatthere are these productswith teams associated with them,there's a single manager who managesall of the product, andthen I manage that manager.
And so kind of who runs product at Stripe?I mean it sort of depends on the product,because the team does first and foremostand then I guess also that managerand then ends up with me.
- Yeah I guess the reason I askedis because you just notedhow important it wasto have a CEO and founder in the details- Right, yep.
- in a lot of things,and that tends to createa structural instability for whatyou usually call VP of product,that's a brutal role,- Right.
- because you're either in a company wherethe CEO founder is micromanaging productor you're in a company wherethey totally empower you to run product,- Right.
- and then you have the messageof the CEO doesn't care about the product.
- Right.
- And so it's a hard place to be.
- Yeah.
And so I mean the I guesspart of what you're getting atis a lot of companies sortof there's this separationbetween, say, the engineering kind of organd the product management function.
- Right.
- And then sort of the VP product,the person overseeing thisproduct management functionif the CEO is really closely involved,that becomes of a pretty thinor at least difficult role, right?- [Professor] Mostly use spreadsheets.
- Well I've never seenone, but okay, yeah.
Whereas in our case, we don'thave a separate product org,- [Professor] Right.
- and so I mean this engineering manager,I mean there's a vast amount in that jobeven sort of leaving particularproduct decisions aside,because it's all the questions aroundhow do we staff them and build themand execute them and operate themand all these kinds of questions,and so she is sort of fairly involvedin the actual product decisions, as am I,but I think it avoids thekind of VP product issue,because even if therewas zero product decisionin the role, which there isn't,but even if there was zero,there's still a huge amountin all the other parts.
- [Professor] Making things work, yeah.
- Exactly.
- Yeah.
That's intersting.
I wonder if that will, I wonderhow long that will scale.
It's a little bit unusualnot to have them separate outsome eventually, you getto some product scale.
- Yeah, well, again, I think part of thiscomes to the fact, the wayin which Stripe is different.
We're building, notsolely, but in large partfor other engineers.
- Right.
- And so I think engineerscan have excellent instinctsfor sort of what theright product to build is.
- Yeah, yeah.
- Whereas when you're trying to kind ofempathize or put yourself in the shoesof some completely different kind of user,then perhaps kind of the impetusfor a separate product org is greater.
- Interesting.
So you've done product exemption,and you've done new things,you did Connect, some other things.
Have you launched productsthat you've killed?- I guess this is an availability biasin the ones thatimmediately come to mind butI don't,we haven't launched,well actually (laughs)part of what I think what's so difficultand feels so tragic whenyou're in the throes of itof sort of a fast-growing startupis that product innovation slows down.
And you're like why would that be?I mean you guys launched with ten people,now we're 330 people, howcould it possibly slow down?- [Professor] Right.
- And I remember observing thiseven before I was kind of in it myselfwhere for Airbnb and DropBox,and these other companies,it felt to me as a user that basicallythe product innovation slowed down.
- [Professor] It stopped.
- And I guess what happens is this kind ofthere's so much investmentthat's required.
So one there's sort of investment requiredjust to keep up with the growth, right?And so I mean the ten people who builtkind of the original Stripe,they weren't capable ofoperating current Stripe.
Operating current Stripe requiressort of all these resources, right?- [Professor] Yep.
- But then additionally,you have to sort of,I mean because you'relooking to do more thingsand both iteration of what already existsand build new things and so forthuntil you're learning tosort of walk and chew gumand juggle and tap danceand all these thingskind of in parallel.
And that requires hiring a lot of people.
And then you have totrain all those peopleand just kind of how the company worksand the product works and all the rest,then they kind of have to all have learnedin this emerging process ofhow to coordinate together,then actually relearn that several timesbecause it sort of constantly shifting,there's this sort of dynamic equilibriumbeneath them whatever,and so the net effect is that the productactually advances surprisingly slowly.
I think the flip side of it is thatwhen you come out ofthis if you do it well,then it's like stand back, right?Where it can be so fast,and I think Facebook isactually a good exampleof a company that sortof went through the slowand then really sped up.
- [Professor] Yep.
- But sort of the- [Professor] The mobileyears, early mobile yearswere pretty hard.
- Exactly but the rateof product improvementactually has been surprising shape.
- [Professor] Yep.
- And so and also you can measurein different axis in terms ofsort of sustaining and improvementversus kind of new axesand orthotic improvement and so forth.
And anyway, all of which to saywe haven't launched all that manykind of discreetly new things,things you could conceivablythen kill, I meanwe've built little featuresand things like thatthat haven't worked out super well.
We've tried experiments andso forth that haven't worked,but nothing kind of epochly kind of new.
Although part of that also gets to I thnkhow we build products,which is we, we're pretty, I mean, again,because we work with developers,and because they'll giveyou pretty good feedback,we often run ideas by them,we'll build a little beta,we'll test with them and so forth,then if they don't like itor if they don't think it's a good idea,then we'll kind of juststop working on it, right?And so by the timesomething gets to launch,it's generally gone throughquite a bit of validation.
The things that have beenreally launched launched,- [Professor] Pretty useful.
- Exactly, yeah.
- [Professor] Okay, soa couple more things.
Oh, sure.
- [Voiceover] Can you talk about anyearly acquisition offers you may have had?- Yeah.
So we've always been pretty explicitlike in the press andany meetings we've hadand so forth that we're justnot that interested in it,and so you can't be somewhat successfulor well, to have been successful,sort of for any kind of thing,it's kind of hard for that to happenwithout all these potential acquirersjust kind of I think sniffing aroundis kind of the right term.
They don't necessarilyhave that much interest,but they're kind of interested.
And also one tends to think of sort ofpotential acquirers orother companies in generalas monolithic entities,and now coming back to the BD point,I think one of the critical realizationsis that companies are composedof sort of a pretty diversearray of individuals,and you're not talking to a company,you're talking to a person.
And you need to kind ofreally piece that apart.
And so anyway, we neverhad any serious discussionswith any acquirer inthe history of Stripe,and we were sort of pretty quickto close off any kind ofsniffing conversations,just because it wasn'twhat we were out to do.
Actually there was one place whereour prior company hadkind of gone through thissort of talent acquisition,but we'd gone throughan acquisition process,and I think that was kind of helpfulin showing us kind ofwhat that looked like,and it enabled us I think to be muchI think clearer ourselves in termsof what we wanted.
- Like once you've beenthrough the acquisition processfor a sort of okay company,it really encourages youto notice what's special,what's working in the place you're at,because it never quiteworks out the way you want,and it also just highlights likeit's unusual for companies to beas special as Stripe or as specialas other things, and whenyou find something like that,you really have it working,you really want to hold onto it.
May I ask you a technology question?So I would view, I think you look aroundand say, well Stripe'sprobably the most modernpayment stock today.
So how do you, but you're also growingyour customer base.
Your customers don't necessarily wantthe most modern payment site,they want the one that's stableand the one that works,doesn't change all the time.
And so how are you gonna think abouttechnology change going forward?- (laughs) I think thatis a great question.
And it's something we're mindful offrom the beginning in developing Stripethat you sort of have tobuild all these thingsand sort of invest in different waysto enable you to kind of innovatesort of without being problematicon that kind of other reliability axis.
- Yep.
- And so for example, we have thiskind of really complicatedversioning systemfor the Stripe API where sort ofthere are all these different sort oftranslation layers composedsort of help turn one API versioninto the prior one.
- Wow.
- So basically people canbe on almost any versionthat we've had over thelast couple of years,and everything works just fine.
We recently went and depricateda Stripe API version from like 2010.
That was kind of like a big deal for us,and we looked through and we're likethree people still using it,so we're like, "All right, wecan reach out to these people"and tell them we're nolonger going to support it,"but sort of as a default matter,but see anything we ever releasedwe're gonna sort of committo keeping it to work,and that kind of required like.
- [Professor] That's easyto say and fairly hard to doover a long term.
- Well, exactly, it's been hard to do thatand also enable you to sort of changelots of things, right?And that's kind of where this translationthere kind of comes in,and so that's kind of an exampleof the kind of thing you have to doin order to enable that.
But for us, it's a constant processof sort of of revisiting that, right?Because I mean you canhave these two axes againof reliability and, Ihate to say innovation,but innovation, and to, you'retrying to expand them both,because you atually want toget more reliable over time,obviously, right?And also kind of the difficulty in beingreliable over time justbecause more stuff increases,and you also want to bedoing more things over time,and so I think I have a pretty good sensefor where the righttradeoffs kind of beingkind of a year ago but sortof in the current state today,it's something we'reliterally, and I was havingthis discussion last nightwith a group of people.
And I will say that the general thing,and I think this is atestament to the engineers,I think Stripe is justone of the most reliableinfrastructure providersjust period, right,in that the total availability recordfor the APIs as a wholehas been remarkably solid.
And I don't know, I guess,I know I can write codeand so this is no credit to me.
- (laughs)- I don't know, I'm sort of impressedfrom a slight distance.
- Okay so, I'll ask acouple management questions,and then we'll open it up.
So you said 330 people,so well the dumb bar number'swell in the rearview mirror,150 people is over a year ago probably.
So what do you do differently now,I mean you hired Claire as COO right?- That's right- What else do you do differently nowthan you would've done a year ago?And how do you think about this stage?- Yep- From a managing the company standpoint?- I think the big change,I'm sure other speakershave said this or well actually firstI should preface everything I say here byI mean I guess it's, Ifeel like I'm sort ofa bad person to be speaking on this stuff,because you have had or will haveall these other speakers whohave actually solved all these issues,and so you shoulddiscount everything I saywith the fact that this is somebodywho's currently tryingto figure it all outand probably at least 50% optimisticallyof what I say is mistaken.
But (laughs) at least I can.
- [Professor] No comment.
Pay close attention towhat Patrick says though.
- At least I can give you some bad ideas,you can kind of benchmark others against,but the big change, and themost stricking thing for meand maybe this partiallycomes from my personality,where I am kind of introverted,is the need for just formalexplicit communicationbroadcast communication.
And it feels sort of, I don't know,I mean it's unnatural, right?And nobody wakes up in the morningand sets out- [Professor] Speaks in bullet points.
- Yeah, exactly, right?- [Professor] Threepriorities for this morning.
- Thought I'd give anupdate on our Q5 strategy,and so there's sort of a lot of thatthat just you have tolearn to be okay with,and I think part of theway to rationalize itis that a startup itself isnot a natural environment.
So you're absolutely correctthat sort of your natural instinctsare going to, I mean, the optimal thingsfor you to do are goingto differ from whatfeels natural, because astartup itself is not naturalthe social groups that you're part of,that you participate in,they don't generally growat 50% or 100% per yearand kind of a different set of behaviorsare required to enable that,and so that's kind of the primary one.
And then- Let me have this again.
So half the people at Stripeweren't there 12 months ago.
Half.
- Yeah, no, it blows my mind too.
- So half the people, whatever your lastannual offsite was or whatever it doesdidn't hear anything Patrick saidin the dec he wrote a year ago.
- Right and every discussion we hadand debate and tortured sort ofquestioning and so forth,like they weren't there for that,and we might have spent months on thisand sort of a new person comes and like"oh, I don't think weshould be doing that,"we should be doing this," right?And of course they do havethe very best of intent, and in facta large part of that is what's goodabout hiring new peopleis they sort of help- [Professor] They reopen some things.
- Exactly, they reopen things,they have a better sensefor how to do things,they bring you perspective,sort of all that stuff, right?But they also just don't have the context,and so it's this very doggedsort of balancing act.
- This is a profound realizationthat almost every good CEO goes through,which is they realize that their jobis to communicate that you're runningon a tighter loop inside your headthan anywhere else, soyou're learning all the time,all the time, all thetime, and the organizationone layer, two layers,three layers away from youcan't absorb that change,and you can't communicateall of what you're thinkingall the time, and so it'sall about consistency,alignment, and so almosteverybody I talk tovalues alignment the longer it goes.
- Sure, yeah, and also again I thinkthere's sort of a delicatesort of superposition of things- [Professor] Sure.
- required there where on the one end,yes, you want alignment,on the other hand, you have to considerthe company as sort of overly rigidor prescriptive or whatever.
That's going to be problematic.
That's the kind of thing that makes peoplewant to quit companies,because their particular perspectiveor the thing that they want to dois divergent from this calcified edificethat is the company, right?And so it's sort of how do you havethe right amount ofstructure and flexibilityand all those things.
- Yep, my two cents are you're tryingto teach people how tothink in the right ways,and you're trying to teach people,you're trying to create a conditionso that they would make roughlythe same decision whetheryou're in the room or not.
- Yeah, well.
- That's a little, eventhat's a little stringent.
- And caveat with I'mdefinitely not the right personor the optimal person to be makingall kinds of decisions.
In fact I'm the optimalperson to be makinga decreasing fraction of decisions, right?And so it's not precisely to dowhat I would do were I in a room,but I don't know, someversion of like, well, yeah.
- [Professor] The Stripe.
- Yeah, there is sort of inthe multi-dimensional spaceof philosophies and kind of perspectives,there's kind of a Stripe blob basically.
- [Professor] Right.
- And sort of I maybe am closerto its center of mass than othersbecause I've been around longerand have a bit more influence,but it is distinct, and it's shifting,and it ought to shiftand that sort of thing.
- That's not what you expected him to say.
Multi-dimensional philosophical spacewhere Stripe blobs.
- The Stripe blob, right.
I think it really has a ring to it.
- [Professor] It's gonna go far.
- Well a corolary of that in terms of justthe kind of the explicitness required,I think the kind of more general versionof it is that just youshould generally shiftfrom speaking to writing.
- Oh, you think that?- Yes.
- Why?- Or rather, it's not thatyou should necessarilyspeak less, you shouldprobably still speak, right?But or at least I think so,I don't know if anyone elsethinks so, but that youneed to add writing, right?Because speaking cankind of only happen onceand generally not to everyoneor it probably becomes super boringif it's to everyone, right?It's this giant production.
Whereas writing persiststhrough time, right?And can be revisited andcan be updated and so forthand also has a helpful, atleast in the good cases,sort of rigidity and clarity to it.
And so one of my favoritethings I realizedor just ones that havethe biggest impact on meover the last maybe two yearswas I think this paper from I think it wasBruno Latour, and he was talking aboutthe scientific revolution, right,and the invention of writing,and we've all heard that sort ofthat writing and the inventingof the printing presswas sort of critical in enabling it,basically Gutenburg, scientificrevolution, job done,and his argument that hegoes that it was actuallymore complicated or nuanced than thatwhere it's not that sort ofwriting or the printing presssort of per se enabled more distributionwhich automatically led to more ideas,because people stilltalked a lot previously,and people had a pretty good sensefor the total space of ideas,and so simplistically the printing presscould come along,it doesn't substantially change things,but the additional propertyof the printing pressbeyond just kind of disseminationthat it added was concretenessand kind of rigidity.
And so when you're hearing somethingfrom a friend of a friend of a friendrecounting somethingthat happened a year ago,God knows how much it'sshifted and changed.
And because it's not really rigid,it's this just, again, amorphous blob.
It's hard to disagree with it,because who knows exactly what they said,and so it's hard to weed outand reject the bad ideas,whereas when it's writing,you can point to paragraphthree, sentence two,this is wrong, it doesnot match my data, right?It's actually that aspectthat was so critical.
So anyway, going back tosort of the writing version,I think that it's just,it's much more clear,and it can be wrong, and it can be updatedin a way that I think is really helpful.
- That is super interesting.
I could talk about that a lot.
I feel like the way you communicatereally shows through inyour product a lot of times.
Like we communicate in Bugs andBugzilla and Mozilla, and it created very,well anyway, a lot ofartifacts get created.
So let's do questions.
You had a question?- [Voiceover] Sort of relatedbut you could also make the argumentthat interpretation reallyjust as open to change.
It's not actually permanent.
(inaudible)- What?- [Voiceover] The point that writing isreally always open to reinterpretationso it's the same as (inaudible)the fact that its (inaudible)is what makes it so misunderstood.
- So the question is just that writing is,like Latour, the guy thatPatrick quoted, would've saidthat writing is alwaysrife for reinterpretation,but I think Patrick's making the pointthat it's just simply more rigidthan just spoken.
- Sure, right, right.
- It's on a spectrum, right?- Yes.
That sounds like it might be.
Next version of the class,I guess we can read theLatour, deep, deep dive.
- Couple philosophical blob questions.
Yeah.
- Yeah, you mentioned thatyou picked the name Stripejust by random.
Can you talk about that?- Yeah, so this is alsoan embarrassing story.
It's kind of a helpfulexercise in humility,because to just remind you ofjust how mistaken your past self could beor wrong.
So anyway /dev/payments,we thought was a super awesome cool name,the world didn't quite agree,and when we went to incorporatewith Delaware, we duly filled out/dev/payments on the paperwork.
It was rejected because,we had actually checked,can you have a slash inthe name, and you can,but you can't have a leading slash,and so but of course beingdetermined entrepreneurs,we overcame that, and we incorporated itas S-L-A-S-H D-E-V S-L-A-S-H.
It was really bad.
And then we'd get mail where it was likeS-L-A-S-H slash character D-E-V, S, yeah.
There were many problems with this name.
- (laughs)- And then you'd have to goand have a meeting with a bank,and they're like all right,and now, the last question,it's kind of like, "Oh,what's the company called?"And basically everything fell to pieces.
(laughter)So we, you wonder why wecouldn't work with Wells,but we kind of eventually came to realizethat we needed to change the name,and we just couldn't come upwith a good name, you know?I guess many peoplehave been through this.
And it basically resorted to us,we have all these books in the office,and just like opening booksand being like, you know,actually one of them was amotorcycle repair manual,because John was riding motorcycles,and so we were like "Carburetor, hmm,"no, probably too hard to spell,"and so you'd flip another few pages,and just like, "Wheel,no that's a bit generic."(laughter)And so we literally reduced to pickingrandom words late at night,and then one of the folks at Stripehad the bright of idea ofwell why don't we just assemblelike a big list of words and emailall of the owners of the dot com domains,just kind of see if the wordsare actually availableto just kind of reduceour search space a little bit,and so we assembled a listof like 100 words that all seemed likegenerally cromulent wordsand just emailed all the owners,and only 10% of them responded,and of those 10%, most of them wantedmillions of dollars to have a right.
And so we assembled apartial list that way,and then we also just kind of continuedour own creative processwhich we already established was awesome,and so we came up with memorable nameslike Pay Demon.
(laughter)And so um.
- [Professor] With an A, undoubtedly.
- We bought both versions, yeah,we still own both versions actually.
(laughter)And you can do a who is on paydemon.com?(laughter)And so we thought itwas like super clever,because we could have this awesome mascot,although maybe BSD confusion issues,and yeah, well, it was great.
Oh and we also had, we really likedthe idea of building things,and so the act of creation and so forth,and so we were kind ofenamored with Pay Forge,this kind of blacksmith idea,and then of course a friend pointed outthe other connotations.
(laughter)Like ah, good point.
And so we were really struggling,and so we, anyway, the owner of stripe.comgenerously responded to usand had an offer that was at leastwithin our plausible budgetary range,but we couldn't decidebetween Pay Demon and Stripe.
(laughter)I swear I'm not making this up.
And this is the part wherekind of the humility comes in,it's like "Jesus Christ!"So we decided that if we could notsettle on a name by I thinkit was December 20, 2011,we would just like, wasit, no 2010, December 2010,we would just default to Stripe.
And we couldn't think ofa more compelling nameby December 20, and so Stripe it became.
And then we sort of, thesecond part of the storyis we, I mean we hadn'tlaunched at this time, right?But we had sort of ahandful of beta users,and we kind of, we weregoing through the name,the rename checklist, right?And so you had to likebuy new SSL certs andmove all the servers,and rejex gsub over the code baseand all this stuff, right?Redo the images, like a lotof stuff to change a name,and somehow we neglectedone of like tell the users,and so all these people,I mean all these peoplebeing like ten of them,but all these peoplewent to log in to their/dev/payment accountsone morning and were redirected to Stripe,so we got a few emails like,"Am I being phished?" or whatever,but we reassured them, and that was that.
And actually the very last kind of detailin that story is I was readingThe Little Kingdom by Mike Moore,it's this kind of history of Apple,and apparently Apple went throughsort of a similar thingwhere they couldn't think of a good name,and so they set outsort of a same time-outwe haven't found a better nameby such and such a date, screw it, Apple.
And so we subsequentlylearned of some precedent.
- One more question.
Yep so here.
- [Voiceover] Can youtalk about your transitionfrom a developer, someone who's technical,someone who's worked onthe product, to a manager?- Yes.
So it still pains mea little bit honestly,in that I really miss coding,and so I know, I often get this questionof do I miss it or notand what does that feel likeand just the shortanswer is yes, I miss it.
I guess so many things then to say aboutthe ensuing transitionto both being a leaderand a manager and so forth.
And some level it reduces to I guesskind of how do you run a companyand a lot of things to be said there.
I think just one thing I'll sort of flagis that in general, I think sort ofthe industry, both kind of overbiasestowards founders, but also towards CEOsin that I guess we all sort of have thiskind of narrative bias or somethingwhere we want to associatekind of abstract conceptslike a company with particular people,and so kind of like I amthe shelling point of Stripein being the CEO,but the degree to whichI am sort of sitting hererepresenting Stripe, Iam sort of in generalin aggregate sort ofvastly over-representedrelative to everyone else.
And so I guess to kindof follow that thought,I think that sort of it's not so muchmy transition to management or whatever,it's kind of a lot of people at Stripesort of collectively transitioningto running an organizationin sort of a pretty large skeleton there.
Actually one of the sort ofthe very clarifying realizations for mewas Ali Roghani comment that basicallythe CEO's job can be reducedto just three things or possibly fourand that everything that's notone of those three oragain it's actually four,is out of scope, and thatthe three that he identifiedwere the strategy and kind of ideallyif the strategy is right,that doesn't requiremuch well-thought timebecause you just keepdoing the same thing.
And secondly the culture,because there's noother person who can do it.
Or there's no person who can do it tothe same degree, right,who encompasses the same model authority.
And then the third one beingsort of selecting the seniormanagement of the company,because, again, no one else can do that,and those people will ideally be sort ofthe main experts whoknow far more than youand are much more effectivein sort of particular areas,but you have to hire, select them,ensure that they're effective,everything else, right?And so in his kind ofontology, like that's it.
That's the job.
- [Professor] That's pretty close.
- It's easy if you get it right.
It's obviously incredibly hard,I mean how can you fix a broken cultureor how does one sort of in the abstractcome up with a good strategy,I mean the really hard sort ofwhen they're not working,but when they're working,it can go pretty smoothly.
And then the fourth one which he describedas being optional, is the product, right,basically the CEO canbe the head of product.
And maybe even that variesdepending on the company,that the CEO can also be involvedwith sort of one specific function, right?And maybe it's some company's CEOis also the head of sales.
I think that's probably sort ofa little bit kind of simplisticand kind of reductionist and so forth,although maybe I'm just tryingto make myself feel better or something,but sort of that was one of the mosthelpfully clarifying thingsthat I kind of heardabout that transition.
- Okay, I think we're done for the day.
I mean maybe Patrick can stayfor a couple minutes,but we should let him go too.
So anyway, thanks for class,and we'll see you all on Thursday.
- Okay, thanks for having me.
